<?php
/**
 * ErrorError
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * ErrorError Class Doc Comment
 *
 * @category    Class
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ErrorError implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Error_error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'error_key' => 'string',
        'status_code' => 'int',
        'brief_summary' => 'string',
        'stack_trace' => 'string',
        'description_url' => 'string',
        'log_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'error_key' => null,
        'status_code' => 'int32',
        'brief_summary' => null,
        'stack_trace' => null,
        'description_url' => null,
        'log_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'error_key' => 'errorKey',
        'status_code' => 'statusCode',
        'brief_summary' => 'briefSummary',
        'stack_trace' => 'stackTrace',
        'description_url' => 'descriptionURL',
        'log_id' => 'logId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'error_key' => 'setErrorKey',
        'status_code' => 'setStatusCode',
        'brief_summary' => 'setBriefSummary',
        'stack_trace' => 'setStackTrace',
        'description_url' => 'setDescriptionUrl',
        'log_id' => 'setLogId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'error_key' => 'getErrorKey',
        'status_code' => 'getStatusCode',
        'brief_summary' => 'getBriefSummary',
        'stack_trace' => 'getStackTrace',
        'description_url' => 'getDescriptionUrl',
        'log_id' => 'getLogId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error_key'] = isset($data['error_key']) ? $data['error_key'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['brief_summary'] = isset($data['brief_summary']) ? $data['brief_summary'] : null;
        $this->container['stack_trace'] = isset($data['stack_trace']) ? $data['stack_trace'] : null;
        $this->container['description_url'] = isset($data['description_url']) ? $data['description_url'] : null;
        $this->container['log_id'] = isset($data['log_id']) ? $data['log_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['status_code'] === null) {
            $invalid_properties[] = "'status_code' can't be null";
        }
        if ($this->container['brief_summary'] === null) {
            $invalid_properties[] = "'brief_summary' can't be null";
        }
        if ($this->container['stack_trace'] === null) {
            $invalid_properties[] = "'stack_trace' can't be null";
        }
        if ($this->container['description_url'] === null) {
            $invalid_properties[] = "'description_url' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['status_code'] === null) {
            return false;
        }
        if ($this->container['brief_summary'] === null) {
            return false;
        }
        if ($this->container['stack_trace'] === null) {
            return false;
        }
        if ($this->container['description_url'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets error_key
     * @return string
     */
    public function getErrorKey()
    {
        return $this->container['error_key'];
    }

    /**
     * Sets error_key
     * @param string $error_key
     * @return $this
     */
    public function setErrorKey($error_key)
    {
        $this->container['error_key'] = $error_key;

        return $this;
    }

    /**
     * Gets status_code
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     * @param int $status_code
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets brief_summary
     * @return string
     */
    public function getBriefSummary()
    {
        return $this->container['brief_summary'];
    }

    /**
     * Sets brief_summary
     * @param string $brief_summary
     * @return $this
     */
    public function setBriefSummary($brief_summary)
    {
        $this->container['brief_summary'] = $brief_summary;

        return $this;
    }

    /**
     * Gets stack_trace
     * @return string
     */
    public function getStackTrace()
    {
        return $this->container['stack_trace'];
    }

    /**
     * Sets stack_trace
     * @param string $stack_trace
     * @return $this
     */
    public function setStackTrace($stack_trace)
    {
        $this->container['stack_trace'] = $stack_trace;

        return $this;
    }

    /**
     * Gets description_url
     * @return string
     */
    public function getDescriptionUrl()
    {
        return $this->container['description_url'];
    }

    /**
     * Sets description_url
     * @param string $description_url
     * @return $this
     */
    public function setDescriptionUrl($description_url)
    {
        $this->container['description_url'] = $description_url;

        return $this;
    }

    /**
     * Gets log_id
     * @return string
     */
    public function getLogId()
    {
        return $this->container['log_id'];
    }

    /**
     * Sets log_id
     * @param string $log_id
     * @return $this
     */
    public function setLogId($log_id)
    {
        $this->container['log_id'] = $log_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


