<?php
/**
 * RequestRange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * RequestRange Class Doc Comment
 *
 * @category    Class
 * @description Facet range
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestRange implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RequestRange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field' => 'string',
        'start' => 'string',
        'end' => 'string',
        'gap' => 'string',
        'hardend' => 'bool',
        'other' => 'string[]',
        'include' => 'string[]',
        'label' => 'string',
        'exclude_filters' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field' => null,
        'start' => null,
        'end' => null,
        'gap' => null,
        'hardend' => null,
        'other' => null,
        'include' => null,
        'label' => null,
        'exclude_filters' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'field' => 'field',
        'start' => 'start',
        'end' => 'end',
        'gap' => 'gap',
        'hardend' => 'hardend',
        'other' => 'other',
        'include' => 'include',
        'label' => 'label',
        'exclude_filters' => 'excludeFilters'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'field' => 'setField',
        'start' => 'setStart',
        'end' => 'setEnd',
        'gap' => 'setGap',
        'hardend' => 'setHardend',
        'other' => 'setOther',
        'include' => 'setInclude',
        'label' => 'setLabel',
        'exclude_filters' => 'setExcludeFilters'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'field' => 'getField',
        'start' => 'getStart',
        'end' => 'getEnd',
        'gap' => 'getGap',
        'hardend' => 'getHardend',
        'other' => 'getOther',
        'include' => 'getInclude',
        'label' => 'getLabel',
        'exclude_filters' => 'getExcludeFilters'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['gap'] = isset($data['gap']) ? $data['gap'] : null;
        $this->container['hardend'] = isset($data['hardend']) ? $data['hardend'] : null;
        $this->container['other'] = isset($data['other']) ? $data['other'] : null;
        $this->container['include'] = isset($data['include']) ? $data['include'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['exclude_filters'] = isset($data['exclude_filters']) ? $data['exclude_filters'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets field
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     * @param string $field The name of the field to perform range
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets start
     * @return string
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     * @param string $start The start of the range
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets end
     * @return string
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     * @param string $end The end of the range
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets gap
     * @return string
     */
    public function getGap()
    {
        return $this->container['gap'];
    }

    /**
     * Sets gap
     * @param string $gap Bucket size
     * @return $this
     */
    public function setGap($gap)
    {
        $this->container['gap'] = $gap;

        return $this;
    }

    /**
     * Gets hardend
     * @return bool
     */
    public function getHardend()
    {
        return $this->container['hardend'];
    }

    /**
     * Sets hardend
     * @param bool $hardend If true means that the last bucket will end at “end” even if it is less than “gap” wide.
     * @return $this
     */
    public function setHardend($hardend)
    {
        $this->container['hardend'] = $hardend;

        return $this;
    }

    /**
     * Gets other
     * @return string[]
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     * @param string[] $other before, after, between, non, all
     * @return $this
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets include
     * @return string[]
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     * @param string[] $include lower, upper, edge, outer, all
     * @return $this
     */
    public function setInclude($include)
    {
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label A label to include as a pivot reference
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets exclude_filters
     * @return string[]
     */
    public function getExcludeFilters()
    {
        return $this->container['exclude_filters'];
    }

    /**
     * Sets exclude_filters
     * @param string[] $exclude_filters Filter queries to exclude when calculating statistics
     * @return $this
     */
    public function setExcludeFilters($exclude_filters)
    {
        $this->container['exclude_filters'] = $exclude_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


