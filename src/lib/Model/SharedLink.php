<?php
/**
 * SharedLink
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * SharedLink Class Doc Comment
 *
 * @category    Class
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SharedLink implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SharedLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'expires_at' => '\DateTime',
        'node_id' => 'string',
        'name' => 'string',
        'title' => 'string',
        'description' => 'string',
        'modified_at' => '\DateTime',
        'modified_by_user' => '\Alfresco\Model\UserInfo',
        'shared_by_user' => '\Alfresco\Model\UserInfo',
        'content' => '\Alfresco\Model\ContentInfo',
        'allowable_operations' => 'string[]',
        'allowable_operations_on_target' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'expires_at' => 'date-time',
        'node_id' => null,
        'name' => null,
        'title' => null,
        'description' => null,
        'modified_at' => 'date-time',
        'modified_by_user' => null,
        'shared_by_user' => null,
        'content' => null,
        'allowable_operations' => null,
        'allowable_operations_on_target' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'expires_at' => 'expiresAt',
        'node_id' => 'nodeId',
        'name' => 'name',
        'title' => 'title',
        'description' => 'description',
        'modified_at' => 'modifiedAt',
        'modified_by_user' => 'modifiedByUser',
        'shared_by_user' => 'sharedByUser',
        'content' => 'content',
        'allowable_operations' => 'allowableOperations',
        'allowable_operations_on_target' => 'allowableOperationsOnTarget'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'expires_at' => 'setExpiresAt',
        'node_id' => 'setNodeId',
        'name' => 'setName',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'modified_at' => 'setModifiedAt',
        'modified_by_user' => 'setModifiedByUser',
        'shared_by_user' => 'setSharedByUser',
        'content' => 'setContent',
        'allowable_operations' => 'setAllowableOperations',
        'allowable_operations_on_target' => 'setAllowableOperationsOnTarget'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'expires_at' => 'getExpiresAt',
        'node_id' => 'getNodeId',
        'name' => 'getName',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'modified_at' => 'getModifiedAt',
        'modified_by_user' => 'getModifiedByUser',
        'shared_by_user' => 'getSharedByUser',
        'content' => 'getContent',
        'allowable_operations' => 'getAllowableOperations',
        'allowable_operations_on_target' => 'getAllowableOperationsOnTarget'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        $this->container['modified_by_user'] = isset($data['modified_by_user']) ? $data['modified_by_user'] : null;
        $this->container['shared_by_user'] = isset($data['shared_by_user']) ? $data['shared_by_user'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['allowable_operations'] = isset($data['allowable_operations']) ? $data['allowable_operations'] : null;
        $this->container['allowable_operations_on_target'] = isset($data['allowable_operations_on_target']) ? $data['allowable_operations_on_target'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['name']) && !preg_match("/^(?!(.*[\\\"\\*\\\\\\>\\<\\?\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))/", $this->container['name'])) {
            $invalid_properties[] = "invalid value for 'name', must be conform to the pattern /^(?!(.*[\\\"\\*\\\\\\>\\<\\?\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/^(?!(.*[\\\"\\*\\\\\\>\\<\\?\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))/", $this->container['name'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets expires_at
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     * @param \DateTime $expires_at
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets node_id
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     * @param string $node_id
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name The name must not contain spaces or the following special characters: * \" < > \\ / ? : and |.  The character . must not be used at the end of the name.
     * @return $this
     */
    public function setName($name)
    {

        if (!is_null($name) && (!preg_match("/^(?!(.*[\\\"\\*\\\\\\>\\<\\?\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))/", $name))) {
            throw new \InvalidArgumentException("invalid value for $name when calling SharedLink., must conform to the pattern /^(?!(.*[\\\"\\*\\\\\\>\\<\\?\/\\:\\|]+.*)|(.*[\\.]?.*[\\.]+$)|(.*[ ]+$))/.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets modified_at
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     * @param \DateTime $modified_at
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets modified_by_user
     * @return \Alfresco\Model\UserInfo
     */
    public function getModifiedByUser()
    {
        return $this->container['modified_by_user'];
    }

    /**
     * Sets modified_by_user
     * @param \Alfresco\Model\UserInfo $modified_by_user
     * @return $this
     */
    public function setModifiedByUser($modified_by_user)
    {
        $this->container['modified_by_user'] = $modified_by_user;

        return $this;
    }

    /**
     * Gets shared_by_user
     * @return \Alfresco\Model\UserInfo
     */
    public function getSharedByUser()
    {
        return $this->container['shared_by_user'];
    }

    /**
     * Sets shared_by_user
     * @param \Alfresco\Model\UserInfo $shared_by_user
     * @return $this
     */
    public function setSharedByUser($shared_by_user)
    {
        $this->container['shared_by_user'] = $shared_by_user;

        return $this;
    }

    /**
     * Gets content
     * @return \Alfresco\Model\ContentInfo
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \Alfresco\Model\ContentInfo $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets allowable_operations
     * @return string[]
     */
    public function getAllowableOperations()
    {
        return $this->container['allowable_operations'];
    }

    /**
     * Sets allowable_operations
     * @param string[] $allowable_operations The allowable operations for the Quickshare link itself. See allowableOperationsOnTarget for the allowable operations pertaining to the linked content node.
     * @return $this
     */
    public function setAllowableOperations($allowable_operations)
    {
        $this->container['allowable_operations'] = $allowable_operations;

        return $this;
    }

    /**
     * Gets allowable_operations_on_target
     * @return string[]
     */
    public function getAllowableOperationsOnTarget()
    {
        return $this->container['allowable_operations_on_target'];
    }

    /**
     * Sets allowable_operations_on_target
     * @param string[] $allowable_operations_on_target The allowable operations for the content node being shared.
     * @return $this
     */
    public function setAllowableOperationsOnTarget($allowable_operations_on_target)
    {
        $this->container['allowable_operations_on_target'] = $allowable_operations_on_target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


