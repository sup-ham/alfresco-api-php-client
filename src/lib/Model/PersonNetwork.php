<?php
/**
 * PersonNetwork
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * PersonNetwork Class Doc Comment
 *
 * @category    Class
 * @description A network is the group of users and sites that belong to an organization. Networks are organized by email domain. When a user signs up for an Alfresco account , their email domain becomes their Home Network.
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PersonNetwork implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PersonNetwork';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'home_network' => 'bool',
        'is_enabled' => 'bool',
        'created_at' => '\DateTime',
        'paid_network' => 'bool',
        'subscription_level' => 'string',
        'quotas' => '\Alfresco\Model\NetworkQuota[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'home_network' => null,
        'is_enabled' => null,
        'created_at' => 'date-time',
        'paid_network' => null,
        'subscription_level' => null,
        'quotas' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'home_network' => 'homeNetwork',
        'is_enabled' => 'isEnabled',
        'created_at' => 'createdAt',
        'paid_network' => 'paidNetwork',
        'subscription_level' => 'subscriptionLevel',
        'quotas' => 'quotas'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'home_network' => 'setHomeNetwork',
        'is_enabled' => 'setIsEnabled',
        'created_at' => 'setCreatedAt',
        'paid_network' => 'setPaidNetwork',
        'subscription_level' => 'setSubscriptionLevel',
        'quotas' => 'setQuotas'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'home_network' => 'getHomeNetwork',
        'is_enabled' => 'getIsEnabled',
        'created_at' => 'getCreatedAt',
        'paid_network' => 'getPaidNetwork',
        'subscription_level' => 'getSubscriptionLevel',
        'quotas' => 'getQuotas'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SUBSCRIPTION_LEVEL_FREE = 'Free';
    const SUBSCRIPTION_LEVEL_STANDARD = 'Standard';
    const SUBSCRIPTION_LEVEL_ENTERPRISE = 'Enterprise';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSubscriptionLevelAllowableValues()
    {
        return [
            self::SUBSCRIPTION_LEVEL_FREE,
            self::SUBSCRIPTION_LEVEL_STANDARD,
            self::SUBSCRIPTION_LEVEL_ENTERPRISE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['home_network'] = isset($data['home_network']) ? $data['home_network'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['paid_network'] = isset($data['paid_network']) ? $data['paid_network'] : null;
        $this->container['subscription_level'] = isset($data['subscription_level']) ? $data['subscription_level'] : null;
        $this->container['quotas'] = isset($data['quotas']) ? $data['quotas'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['is_enabled'] === null) {
            $invalid_properties[] = "'is_enabled' can't be null";
        }
        $allowed_values = $this->getSubscriptionLevelAllowableValues();
        if (!in_array($this->container['subscription_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'subscription_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['is_enabled'] === null) {
            return false;
        }
        $allowed_values = $this->getSubscriptionLevelAllowableValues();
        if (!in_array($this->container['subscription_level'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id This network's unique id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets home_network
     * @return bool
     */
    public function getHomeNetwork()
    {
        return $this->container['home_network'];
    }

    /**
     * Sets home_network
     * @param bool $home_network Is this the home network?
     * @return $this
     */
    public function setHomeNetwork($home_network)
    {
        $this->container['home_network'] = $home_network;

        return $this;
    }

    /**
     * Gets is_enabled
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     * @param bool $is_enabled
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets paid_network
     * @return bool
     */
    public function getPaidNetwork()
    {
        return $this->container['paid_network'];
    }

    /**
     * Sets paid_network
     * @param bool $paid_network
     * @return $this
     */
    public function setPaidNetwork($paid_network)
    {
        $this->container['paid_network'] = $paid_network;

        return $this;
    }

    /**
     * Gets subscription_level
     * @return string
     */
    public function getSubscriptionLevel()
    {
        return $this->container['subscription_level'];
    }

    /**
     * Sets subscription_level
     * @param string $subscription_level
     * @return $this
     */
    public function setSubscriptionLevel($subscription_level)
    {
        $allowed_values = $this->getSubscriptionLevelAllowableValues();
        if (!is_null($subscription_level) && !in_array($subscription_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscription_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['subscription_level'] = $subscription_level;

        return $this;
    }

    /**
     * Gets quotas
     * @return \Alfresco\Model\NetworkQuota[]
     */
    public function getQuotas()
    {
        return $this->container['quotas'];
    }

    /**
     * Sets quotas
     * @param \Alfresco\Model\NetworkQuota[] $quotas
     * @return $this
     */
    public function setQuotas($quotas)
    {
        $this->container['quotas'] = $quotas;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


