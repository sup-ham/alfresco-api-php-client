<?php
/**
 * RequestStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * RequestStats Class Doc Comment
 *
 * @category    Class
 * @description A list of stats request.
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestStats implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RequestStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field' => 'string',
        'label' => 'string',
        'min' => 'bool',
        'max' => 'bool',
        'sum' => 'bool',
        'count_values' => 'bool',
        'missing' => 'bool',
        'mean' => 'bool',
        'stddev' => 'bool',
        'sum_of_squares' => 'bool',
        'distinct_values' => 'bool',
        'count_distinct' => 'bool',
        'cardinality' => 'bool',
        'cardinality_accuracy' => 'float',
        'exclude_filters' => 'string[]',
        'percentiles' => 'float[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field' => null,
        'label' => null,
        'min' => null,
        'max' => null,
        'sum' => null,
        'count_values' => null,
        'missing' => null,
        'mean' => null,
        'stddev' => null,
        'sum_of_squares' => null,
        'distinct_values' => null,
        'count_distinct' => null,
        'cardinality' => null,
        'cardinality_accuracy' => 'float',
        'exclude_filters' => null,
        'percentiles' => 'float'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'field' => 'field',
        'label' => 'label',
        'min' => 'min',
        'max' => 'max',
        'sum' => 'sum',
        'count_values' => 'countValues',
        'missing' => 'missing',
        'mean' => 'mean',
        'stddev' => 'stddev',
        'sum_of_squares' => 'sumOfSquares',
        'distinct_values' => 'distinctValues',
        'count_distinct' => 'countDistinct',
        'cardinality' => 'cardinality',
        'cardinality_accuracy' => 'cardinalityAccuracy',
        'exclude_filters' => 'excludeFilters',
        'percentiles' => 'percentiles'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'field' => 'setField',
        'label' => 'setLabel',
        'min' => 'setMin',
        'max' => 'setMax',
        'sum' => 'setSum',
        'count_values' => 'setCountValues',
        'missing' => 'setMissing',
        'mean' => 'setMean',
        'stddev' => 'setStddev',
        'sum_of_squares' => 'setSumOfSquares',
        'distinct_values' => 'setDistinctValues',
        'count_distinct' => 'setCountDistinct',
        'cardinality' => 'setCardinality',
        'cardinality_accuracy' => 'setCardinalityAccuracy',
        'exclude_filters' => 'setExcludeFilters',
        'percentiles' => 'setPercentiles'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'field' => 'getField',
        'label' => 'getLabel',
        'min' => 'getMin',
        'max' => 'getMax',
        'sum' => 'getSum',
        'count_values' => 'getCountValues',
        'missing' => 'getMissing',
        'mean' => 'getMean',
        'stddev' => 'getStddev',
        'sum_of_squares' => 'getSumOfSquares',
        'distinct_values' => 'getDistinctValues',
        'count_distinct' => 'getCountDistinct',
        'cardinality' => 'getCardinality',
        'cardinality_accuracy' => 'getCardinalityAccuracy',
        'exclude_filters' => 'getExcludeFilters',
        'percentiles' => 'getPercentiles'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['min'] = isset($data['min']) ? $data['min'] : true;
        $this->container['max'] = isset($data['max']) ? $data['max'] : true;
        $this->container['sum'] = isset($data['sum']) ? $data['sum'] : true;
        $this->container['count_values'] = isset($data['count_values']) ? $data['count_values'] : true;
        $this->container['missing'] = isset($data['missing']) ? $data['missing'] : true;
        $this->container['mean'] = isset($data['mean']) ? $data['mean'] : true;
        $this->container['stddev'] = isset($data['stddev']) ? $data['stddev'] : true;
        $this->container['sum_of_squares'] = isset($data['sum_of_squares']) ? $data['sum_of_squares'] : true;
        $this->container['distinct_values'] = isset($data['distinct_values']) ? $data['distinct_values'] : false;
        $this->container['count_distinct'] = isset($data['count_distinct']) ? $data['count_distinct'] : false;
        $this->container['cardinality'] = isset($data['cardinality']) ? $data['cardinality'] : false;
        $this->container['cardinality_accuracy'] = isset($data['cardinality_accuracy']) ? $data['cardinality_accuracy'] : 0.3;
        $this->container['exclude_filters'] = isset($data['exclude_filters']) ? $data['exclude_filters'] : null;
        $this->container['percentiles'] = isset($data['percentiles']) ? $data['percentiles'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets field
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     * @param string $field The stats field
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label A label to include for reference the stats field
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets min
     * @return bool
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     * @param bool $min The minimum value of the field
     * @return $this
     */
    public function setMin($min)
    {
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     * @return bool
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     * @param bool $max The maximum value of the field
     * @return $this
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets sum
     * @return bool
     */
    public function getSum()
    {
        return $this->container['sum'];
    }

    /**
     * Sets sum
     * @param bool $sum The sum of all values of the field
     * @return $this
     */
    public function setSum($sum)
    {
        $this->container['sum'] = $sum;

        return $this;
    }

    /**
     * Gets count_values
     * @return bool
     */
    public function getCountValues()
    {
        return $this->container['count_values'];
    }

    /**
     * Sets count_values
     * @param bool $count_values The number which have a value for this field
     * @return $this
     */
    public function setCountValues($count_values)
    {
        $this->container['count_values'] = $count_values;

        return $this;
    }

    /**
     * Gets missing
     * @return bool
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     * @param bool $missing The number which do not have a value for this field
     * @return $this
     */
    public function setMissing($missing)
    {
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets mean
     * @return bool
     */
    public function getMean()
    {
        return $this->container['mean'];
    }

    /**
     * Sets mean
     * @param bool $mean The average
     * @return $this
     */
    public function setMean($mean)
    {
        $this->container['mean'] = $mean;

        return $this;
    }

    /**
     * Gets stddev
     * @return bool
     */
    public function getStddev()
    {
        return $this->container['stddev'];
    }

    /**
     * Sets stddev
     * @param bool $stddev Standard deviation
     * @return $this
     */
    public function setStddev($stddev)
    {
        $this->container['stddev'] = $stddev;

        return $this;
    }

    /**
     * Gets sum_of_squares
     * @return bool
     */
    public function getSumOfSquares()
    {
        return $this->container['sum_of_squares'];
    }

    /**
     * Sets sum_of_squares
     * @param bool $sum_of_squares Sum of all values squared
     * @return $this
     */
    public function setSumOfSquares($sum_of_squares)
    {
        $this->container['sum_of_squares'] = $sum_of_squares;

        return $this;
    }

    /**
     * Gets distinct_values
     * @return bool
     */
    public function getDistinctValues()
    {
        return $this->container['distinct_values'];
    }

    /**
     * Sets distinct_values
     * @param bool $distinct_values The set of all distinct values for the field (This can be very expensive to calculate)
     * @return $this
     */
    public function setDistinctValues($distinct_values)
    {
        $this->container['distinct_values'] = $distinct_values;

        return $this;
    }

    /**
     * Gets count_distinct
     * @return bool
     */
    public function getCountDistinct()
    {
        return $this->container['count_distinct'];
    }

    /**
     * Sets count_distinct
     * @param bool $count_distinct The number of distinct values  (This can be very expensive to calculate)
     * @return $this
     */
    public function setCountDistinct($count_distinct)
    {
        $this->container['count_distinct'] = $count_distinct;

        return $this;
    }

    /**
     * Gets cardinality
     * @return bool
     */
    public function getCardinality()
    {
        return $this->container['cardinality'];
    }

    /**
     * Sets cardinality
     * @param bool $cardinality A statistical approximation of the number of distinct values
     * @return $this
     */
    public function setCardinality($cardinality)
    {
        $this->container['cardinality'] = $cardinality;

        return $this;
    }

    /**
     * Gets cardinality_accuracy
     * @return float
     */
    public function getCardinalityAccuracy()
    {
        return $this->container['cardinality_accuracy'];
    }

    /**
     * Sets cardinality_accuracy
     * @param float $cardinality_accuracy Number between 0.0 and 1.0 indicating how aggressively the algorithm should try to be accurate. Used with boolean cardinality flag.
     * @return $this
     */
    public function setCardinalityAccuracy($cardinality_accuracy)
    {
        $this->container['cardinality_accuracy'] = $cardinality_accuracy;

        return $this;
    }

    /**
     * Gets exclude_filters
     * @return string[]
     */
    public function getExcludeFilters()
    {
        return $this->container['exclude_filters'];
    }

    /**
     * Sets exclude_filters
     * @param string[] $exclude_filters A list of filters to exclude
     * @return $this
     */
    public function setExcludeFilters($exclude_filters)
    {
        $this->container['exclude_filters'] = $exclude_filters;

        return $this;
    }

    /**
     * Gets percentiles
     * @return float[]
     */
    public function getPercentiles()
    {
        return $this->container['percentiles'];
    }

    /**
     * Sets percentiles
     * @param float[] $percentiles A list of percentile values, e.g. \"1,99,99.9\"
     * @return $this
     */
    public function setPercentiles($percentiles)
    {
        $this->container['percentiles'] = $percentiles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


