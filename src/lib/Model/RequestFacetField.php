<?php
/**
 * RequestFacetField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * RequestFacetField Class Doc Comment
 *
 * @category    Class
 * @description A simple facet field
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestFacetField implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RequestFacetField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field' => 'string',
        'label' => 'string',
        'prefix' => 'string',
        'sort' => 'string',
        'method' => 'string',
        'missing' => 'bool',
        'limit' => 'int',
        'offset' => 'int',
        'mincount' => 'int',
        'facet_enum_cache_min_df' => 'int',
        'exclude_filters' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field' => null,
        'label' => null,
        'prefix' => null,
        'sort' => null,
        'method' => null,
        'missing' => null,
        'limit' => null,
        'offset' => null,
        'mincount' => null,
        'facet_enum_cache_min_df' => null,
        'exclude_filters' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'field' => 'field',
        'label' => 'label',
        'prefix' => 'prefix',
        'sort' => 'sort',
        'method' => 'method',
        'missing' => 'missing',
        'limit' => 'limit',
        'offset' => 'offset',
        'mincount' => 'mincount',
        'facet_enum_cache_min_df' => 'facetEnumCacheMinDf',
        'exclude_filters' => 'excludeFilters'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'field' => 'setField',
        'label' => 'setLabel',
        'prefix' => 'setPrefix',
        'sort' => 'setSort',
        'method' => 'setMethod',
        'missing' => 'setMissing',
        'limit' => 'setLimit',
        'offset' => 'setOffset',
        'mincount' => 'setMincount',
        'facet_enum_cache_min_df' => 'setFacetEnumCacheMinDf',
        'exclude_filters' => 'setExcludeFilters'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'field' => 'getField',
        'label' => 'getLabel',
        'prefix' => 'getPrefix',
        'sort' => 'getSort',
        'method' => 'getMethod',
        'missing' => 'getMissing',
        'limit' => 'getLimit',
        'offset' => 'getOffset',
        'mincount' => 'getMincount',
        'facet_enum_cache_min_df' => 'getFacetEnumCacheMinDf',
        'exclude_filters' => 'getExcludeFilters'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SORT_COUNT = 'COUNT';
    const SORT_INDEX = 'INDEX';
    const METHOD_ENUM = 'ENUM';
    const METHOD_FC = 'FC';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSortAllowableValues()
    {
        return [
            self::SORT_COUNT,
            self::SORT_INDEX,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_ENUM,
            self::METHOD_FC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['missing'] = isset($data['missing']) ? $data['missing'] : false;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
        $this->container['mincount'] = isset($data['mincount']) ? $data['mincount'] : null;
        $this->container['facet_enum_cache_min_df'] = isset($data['facet_enum_cache_min_df']) ? $data['facet_enum_cache_min_df'] : null;
        $this->container['exclude_filters'] = isset($data['exclude_filters']) ? $data['exclude_filters'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getSortAllowableValues();
        if (!in_array($this->container['sort'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sort', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getMethodAllowableValues();
        if (!in_array($this->container['method'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'method', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getSortAllowableValues();
        if (!in_array($this->container['sort'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getMethodAllowableValues();
        if (!in_array($this->container['method'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets field
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     * @param string $field The facet field
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets label
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     * @param string $label A label to include in place of the facet field
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets prefix
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     * @param string $prefix Restricts the possible constraints to only indexed values with a specified prefix.
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets sort
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param string $sort
     * @return $this
     */
    public function setSort($sort)
    {
        $allowed_values = $this->getSortAllowableValues();
        if (!is_null($sort) && !in_array($sort, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets method
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     * @param string $method
     * @return $this
     */
    public function setMethod($method)
    {
        $allowed_values = $this->getMethodAllowableValues();
        if (!is_null($method) && !in_array($method, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'method', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets missing
     * @return bool
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     * @param bool $missing When true, count results that match the query but which have no facet value for the field (in addition to the Term-based constraints).
     * @return $this
     */
    public function setMissing($missing)
    {
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets limit
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param int $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     * @param int $offset
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }

    /**
     * Gets mincount
     * @return int
     */
    public function getMincount()
    {
        return $this->container['mincount'];
    }

    /**
     * Sets mincount
     * @param int $mincount The minimum count required for a facet field to be included in the response.
     * @return $this
     */
    public function setMincount($mincount)
    {
        $this->container['mincount'] = $mincount;

        return $this;
    }

    /**
     * Gets facet_enum_cache_min_df
     * @return int
     */
    public function getFacetEnumCacheMinDf()
    {
        return $this->container['facet_enum_cache_min_df'];
    }

    /**
     * Sets facet_enum_cache_min_df
     * @param int $facet_enum_cache_min_df
     * @return $this
     */
    public function setFacetEnumCacheMinDf($facet_enum_cache_min_df)
    {
        $this->container['facet_enum_cache_min_df'] = $facet_enum_cache_min_df;

        return $this;
    }

    /**
     * Gets exclude_filters
     * @return string[]
     */
    public function getExcludeFilters()
    {
        return $this->container['exclude_filters'];
    }

    /**
     * Sets exclude_filters
     * @param string[] $exclude_filters Filter Queries with tags listed here will not be included in facet counts. This is used for multi-select facetting.
     * @return $this
     */
    public function setExcludeFilters($exclude_filters)
    {
        $this->container['exclude_filters'] = $exclude_filters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


