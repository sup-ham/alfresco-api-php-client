<?php
/**
 * RequestHighlightFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * RequestHighlightFields Class Doc Comment
 *
 * @category    Class
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestHighlightFields implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RequestHighlight_fields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field' => 'string',
        'snippet_count' => 'int',
        'fragment_size' => 'int',
        'merge_contiguous' => 'bool',
        'prefix' => 'string',
        'postfix' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field' => null,
        'snippet_count' => null,
        'fragment_size' => null,
        'merge_contiguous' => null,
        'prefix' => null,
        'postfix' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'field' => 'field',
        'snippet_count' => 'snippetCount',
        'fragment_size' => 'fragmentSize',
        'merge_contiguous' => 'mergeContiguous',
        'prefix' => 'prefix',
        'postfix' => 'postfix'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'field' => 'setField',
        'snippet_count' => 'setSnippetCount',
        'fragment_size' => 'setFragmentSize',
        'merge_contiguous' => 'setMergeContiguous',
        'prefix' => 'setPrefix',
        'postfix' => 'setPostfix'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'field' => 'getField',
        'snippet_count' => 'getSnippetCount',
        'fragment_size' => 'getFragmentSize',
        'merge_contiguous' => 'getMergeContiguous',
        'prefix' => 'getPrefix',
        'postfix' => 'getPostfix'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['snippet_count'] = isset($data['snippet_count']) ? $data['snippet_count'] : null;
        $this->container['fragment_size'] = isset($data['fragment_size']) ? $data['fragment_size'] : null;
        $this->container['merge_contiguous'] = isset($data['merge_contiguous']) ? $data['merge_contiguous'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['postfix'] = isset($data['postfix']) ? $data['postfix'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets field
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     * @param string $field The name of the field to highlight.
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets snippet_count
     * @return int
     */
    public function getSnippetCount()
    {
        return $this->container['snippet_count'];
    }

    /**
     * Sets snippet_count
     * @param int $snippet_count
     * @return $this
     */
    public function setSnippetCount($snippet_count)
    {
        $this->container['snippet_count'] = $snippet_count;

        return $this;
    }

    /**
     * Gets fragment_size
     * @return int
     */
    public function getFragmentSize()
    {
        return $this->container['fragment_size'];
    }

    /**
     * Sets fragment_size
     * @param int $fragment_size
     * @return $this
     */
    public function setFragmentSize($fragment_size)
    {
        $this->container['fragment_size'] = $fragment_size;

        return $this;
    }

    /**
     * Gets merge_contiguous
     * @return bool
     */
    public function getMergeContiguous()
    {
        return $this->container['merge_contiguous'];
    }

    /**
     * Sets merge_contiguous
     * @param bool $merge_contiguous
     * @return $this
     */
    public function setMergeContiguous($merge_contiguous)
    {
        $this->container['merge_contiguous'] = $merge_contiguous;

        return $this;
    }

    /**
     * Gets prefix
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     * @param string $prefix
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets postfix
     * @return string
     */
    public function getPostfix()
    {
        return $this->container['postfix'];
    }

    /**
     * Sets postfix
     * @param string $postfix
     * @return $this
     */
    public function setPostfix($postfix)
    {
        $this->container['postfix'] = $postfix;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


