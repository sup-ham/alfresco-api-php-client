<?php
/**
 * ResultSetContext
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * ResultSetContext Class Doc Comment
 *
 * @category    Class
 * @description Context that applies to the whole result set
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ResultSetContext implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ResultSetContext';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'consistency' => '\Alfresco\Model\ResponseConsistency',
        'request' => '\Alfresco\Model\SearchRequest',
        'facet_queries' => '\Alfresco\Model\ResultSetContextFacetQueries[]',
        'facets_fields' => '\Alfresco\Model\ResultBuckets[]',
        'facets' => '\Alfresco\Model\GenericFacetResponse[]',
        'spellcheck' => '\Alfresco\Model\ResultSetContextSpellcheck[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'consistency' => null,
        'request' => null,
        'facet_queries' => null,
        'facets_fields' => null,
        'facets' => null,
        'spellcheck' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'consistency' => 'consistency',
        'request' => 'request',
        'facet_queries' => 'facetQueries',
        'facets_fields' => 'facetsFields',
        'facets' => 'facets',
        'spellcheck' => 'spellcheck'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'consistency' => 'setConsistency',
        'request' => 'setRequest',
        'facet_queries' => 'setFacetQueries',
        'facets_fields' => 'setFacetsFields',
        'facets' => 'setFacets',
        'spellcheck' => 'setSpellcheck'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'consistency' => 'getConsistency',
        'request' => 'getRequest',
        'facet_queries' => 'getFacetQueries',
        'facets_fields' => 'getFacetsFields',
        'facets' => 'getFacets',
        'spellcheck' => 'getSpellcheck'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consistency'] = isset($data['consistency']) ? $data['consistency'] : null;
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['facet_queries'] = isset($data['facet_queries']) ? $data['facet_queries'] : null;
        $this->container['facets_fields'] = isset($data['facets_fields']) ? $data['facets_fields'] : null;
        $this->container['facets'] = isset($data['facets']) ? $data['facets'] : null;
        $this->container['spellcheck'] = isset($data['spellcheck']) ? $data['spellcheck'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets consistency
     * @return \Alfresco\Model\ResponseConsistency
     */
    public function getConsistency()
    {
        return $this->container['consistency'];
    }

    /**
     * Sets consistency
     * @param \Alfresco\Model\ResponseConsistency $consistency
     * @return $this
     */
    public function setConsistency($consistency)
    {
        $this->container['consistency'] = $consistency;

        return $this;
    }

    /**
     * Gets request
     * @return \Alfresco\Model\SearchRequest
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     * @param \Alfresco\Model\SearchRequest $request
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets facet_queries
     * @return \Alfresco\Model\ResultSetContextFacetQueries[]
     */
    public function getFacetQueries()
    {
        return $this->container['facet_queries'];
    }

    /**
     * Sets facet_queries
     * @param \Alfresco\Model\ResultSetContextFacetQueries[] $facet_queries The counts from facet queries
     * @return $this
     */
    public function setFacetQueries($facet_queries)
    {
        $this->container['facet_queries'] = $facet_queries;

        return $this;
    }

    /**
     * Gets facets_fields
     * @return \Alfresco\Model\ResultBuckets[]
     */
    public function getFacetsFields()
    {
        return $this->container['facets_fields'];
    }

    /**
     * Sets facets_fields
     * @param \Alfresco\Model\ResultBuckets[] $facets_fields The counts from field facets
     * @return $this
     */
    public function setFacetsFields($facets_fields)
    {
        $this->container['facets_fields'] = $facets_fields;

        return $this;
    }

    /**
     * Gets facets
     * @return \Alfresco\Model\GenericFacetResponse[]
     */
    public function getFacets()
    {
        return $this->container['facets'];
    }

    /**
     * Sets facets
     * @param \Alfresco\Model\GenericFacetResponse[] $facets The faceted response
     * @return $this
     */
    public function setFacets($facets)
    {
        $this->container['facets'] = $facets;

        return $this;
    }

    /**
     * Gets spellcheck
     * @return \Alfresco\Model\ResultSetContextSpellcheck[]
     */
    public function getSpellcheck()
    {
        return $this->container['spellcheck'];
    }

    /**
     * Sets spellcheck
     * @param \Alfresco\Model\ResultSetContextSpellcheck[] $spellcheck Suggested corrections  If zero results were found for the original query then a single entry of type \"searchInsteadFor\" will be returned. If alternatives were found that return more results than the original query they are returned as \"didYouMean\" options. The highest quality suggestion is first.
     * @return $this
     */
    public function setSpellcheck($spellcheck)
    {
        $this->container['spellcheck'] = $spellcheck;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


