<?php
/**
 * Activity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * Activity Class Doc Comment
 *
 * @category    Class
 * @description Activities describe any past activity in a site, for example creating an item of content, commenting on a node, liking an item of content.
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Activity implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Activity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'post_person_id' => 'string',
        'id' => 'int',
        'site_id' => 'string',
        'posted_at' => '\DateTime',
        'feed_person_id' => 'string',
        'activity_summary' => 'map[string,string]',
        'activity_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'post_person_id' => null,
        'id' => 'int64',
        'site_id' => null,
        'posted_at' => 'date-time',
        'feed_person_id' => null,
        'activity_summary' => null,
        'activity_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'post_person_id' => 'postPersonId',
        'id' => 'id',
        'site_id' => 'siteId',
        'posted_at' => 'postedAt',
        'feed_person_id' => 'feedPersonId',
        'activity_summary' => 'activitySummary',
        'activity_type' => 'activityType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'post_person_id' => 'setPostPersonId',
        'id' => 'setId',
        'site_id' => 'setSiteId',
        'posted_at' => 'setPostedAt',
        'feed_person_id' => 'setFeedPersonId',
        'activity_summary' => 'setActivitySummary',
        'activity_type' => 'setActivityType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'post_person_id' => 'getPostPersonId',
        'id' => 'getId',
        'site_id' => 'getSiteId',
        'posted_at' => 'getPostedAt',
        'feed_person_id' => 'getFeedPersonId',
        'activity_summary' => 'getActivitySummary',
        'activity_type' => 'getActivityType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['post_person_id'] = isset($data['post_person_id']) ? $data['post_person_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['posted_at'] = isset($data['posted_at']) ? $data['posted_at'] : null;
        $this->container['feed_person_id'] = isset($data['feed_person_id']) ? $data['feed_person_id'] : null;
        $this->container['activity_summary'] = isset($data['activity_summary']) ? $data['activity_summary'] : null;
        $this->container['activity_type'] = isset($data['activity_type']) ? $data['activity_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['post_person_id'] === null) {
            $invalid_properties[] = "'post_person_id' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['feed_person_id'] === null) {
            $invalid_properties[] = "'feed_person_id' can't be null";
        }
        if ($this->container['activity_type'] === null) {
            $invalid_properties[] = "'activity_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['post_person_id'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['feed_person_id'] === null) {
            return false;
        }
        if ($this->container['activity_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets post_person_id
     * @return string
     */
    public function getPostPersonId()
    {
        return $this->container['post_person_id'];
    }

    /**
     * Sets post_person_id
     * @param string $post_person_id The id of the person who performed the activity
     * @return $this
     */
    public function setPostPersonId($post_person_id)
    {
        $this->container['post_person_id'] = $post_person_id;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id The unique id of the activity
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets site_id
     * @return string
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     * @param string $site_id The unique id of the site on which the activity was performed
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets posted_at
     * @return \DateTime
     */
    public function getPostedAt()
    {
        return $this->container['posted_at'];
    }

    /**
     * Sets posted_at
     * @param \DateTime $posted_at The date time at which the activity was performed
     * @return $this
     */
    public function setPostedAt($posted_at)
    {
        $this->container['posted_at'] = $posted_at;

        return $this;
    }

    /**
     * Gets feed_person_id
     * @return string
     */
    public function getFeedPersonId()
    {
        return $this->container['feed_person_id'];
    }

    /**
     * Sets feed_person_id
     * @param string $feed_person_id The feed on which this activity was posted
     * @return $this
     */
    public function setFeedPersonId($feed_person_id)
    {
        $this->container['feed_person_id'] = $feed_person_id;

        return $this;
    }

    /**
     * Gets activity_summary
     * @return map[string,string]
     */
    public function getActivitySummary()
    {
        return $this->container['activity_summary'];
    }

    /**
     * Sets activity_summary
     * @param map[string,string] $activity_summary An object summarizing the activity
     * @return $this
     */
    public function setActivitySummary($activity_summary)
    {
        $this->container['activity_summary'] = $activity_summary;

        return $this;
    }

    /**
     * Gets activity_type
     * @return string
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     * @param string $activity_type The type of the activity posted
     * @return $this
     */
    public function setActivityType($activity_type)
    {
        $this->container['activity_type'] = $activity_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


