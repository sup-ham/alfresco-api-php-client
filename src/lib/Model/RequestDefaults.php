<?php
/**
 * RequestDefaults
 *
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Model;

use \ArrayAccess;

/**
 * RequestDefaults Class Doc Comment
 *
 * @category    Class
 * @description Common query defaults
 * @package     Alfresco
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RequestDefaults implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RequestDefaults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'text_attributes' => 'string[]',
        'default_fts_operator' => 'string',
        'default_fts_field_operator' => 'string',
        'namespace' => 'string',
        'default_field_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'text_attributes' => null,
        'default_fts_operator' => null,
        'default_fts_field_operator' => null,
        'namespace' => null,
        'default_field_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'text_attributes' => 'textAttributes',
        'default_fts_operator' => 'defaultFTSOperator',
        'default_fts_field_operator' => 'defaultFTSFieldOperator',
        'namespace' => 'namespace',
        'default_field_name' => 'defaultFieldName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'text_attributes' => 'setTextAttributes',
        'default_fts_operator' => 'setDefaultFtsOperator',
        'default_fts_field_operator' => 'setDefaultFtsFieldOperator',
        'namespace' => 'setNamespace',
        'default_field_name' => 'setDefaultFieldName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'text_attributes' => 'getTextAttributes',
        'default_fts_operator' => 'getDefaultFtsOperator',
        'default_fts_field_operator' => 'getDefaultFtsFieldOperator',
        'namespace' => 'getNamespace',
        'default_field_name' => 'getDefaultFieldName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const DEFAULT_FTS_OPERATOR__AND = 'AND';
    const DEFAULT_FTS_OPERATOR__OR = 'OR';
    const DEFAULT_FTS_FIELD_OPERATOR__AND = 'AND';
    const DEFAULT_FTS_FIELD_OPERATOR__OR = 'OR';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDefaultFtsOperatorAllowableValues()
    {
        return [
            self::DEFAULT_FTS_OPERATOR__AND,
            self::DEFAULT_FTS_OPERATOR__OR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDefaultFtsFieldOperatorAllowableValues()
    {
        return [
            self::DEFAULT_FTS_FIELD_OPERATOR__AND,
            self::DEFAULT_FTS_FIELD_OPERATOR__OR,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text_attributes'] = isset($data['text_attributes']) ? $data['text_attributes'] : null;
        $this->container['default_fts_operator'] = isset($data['default_fts_operator']) ? $data['default_fts_operator'] : 'AND';
        $this->container['default_fts_field_operator'] = isset($data['default_fts_field_operator']) ? $data['default_fts_field_operator'] : 'AND';
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : 'cm';
        $this->container['default_field_name'] = isset($data['default_field_name']) ? $data['default_field_name'] : 'TEXT';
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getDefaultFtsOperatorAllowableValues();
        if (!in_array($this->container['default_fts_operator'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'default_fts_operator', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getDefaultFtsFieldOperatorAllowableValues();
        if (!in_array($this->container['default_fts_field_operator'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'default_fts_field_operator', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getDefaultFtsOperatorAllowableValues();
        if (!in_array($this->container['default_fts_operator'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getDefaultFtsFieldOperatorAllowableValues();
        if (!in_array($this->container['default_fts_field_operator'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets text_attributes
     * @return string[]
     */
    public function getTextAttributes()
    {
        return $this->container['text_attributes'];
    }

    /**
     * Sets text_attributes
     * @param string[] $text_attributes A list of query fields/properties used to expand TEXT: queries. The default is cm:content. You could include all content properties using d:content or list all individual content properties or types. As more terms are included the query size, complexity, memory impact and query time will increase.
     * @return $this
     */
    public function setTextAttributes($text_attributes)
    {
        $this->container['text_attributes'] = $text_attributes;

        return $this;
    }

    /**
     * Gets default_fts_operator
     * @return string
     */
    public function getDefaultFtsOperator()
    {
        return $this->container['default_fts_operator'];
    }

    /**
     * Sets default_fts_operator
     * @param string $default_fts_operator The default way to combine query parts when AND or OR is not explicitly stated - includes ! - + one two three (one two three)
     * @return $this
     */
    public function setDefaultFtsOperator($default_fts_operator)
    {
        $allowed_values = $this->getDefaultFtsOperatorAllowableValues();
        if (!is_null($default_fts_operator) && !in_array($default_fts_operator, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_fts_operator', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['default_fts_operator'] = $default_fts_operator;

        return $this;
    }

    /**
     * Gets default_fts_field_operator
     * @return string
     */
    public function getDefaultFtsFieldOperator()
    {
        return $this->container['default_fts_field_operator'];
    }

    /**
     * Sets default_fts_field_operator
     * @param string $default_fts_field_operator The default way to combine query parts in field query groups when AND or OR is not explicitly stated - includes ! - + FIELD:(one two three)
     * @return $this
     */
    public function setDefaultFtsFieldOperator($default_fts_field_operator)
    {
        $allowed_values = $this->getDefaultFtsFieldOperatorAllowableValues();
        if (!is_null($default_fts_field_operator) && !in_array($default_fts_field_operator, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'default_fts_field_operator', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['default_fts_field_operator'] = $default_fts_field_operator;

        return $this;
    }

    /**
     * Gets namespace
     * @return string
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     * @param string $namespace The default name space to use if one is not provided
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets default_field_name
     * @return string
     */
    public function getDefaultFieldName()
    {
        return $this->container['default_field_name'];
    }

    /**
     * Sets default_field_name
     * @param string $default_field_name
     * @return $this
     */
    public function setDefaultFieldName($default_field_name)
    {
        $this->container['default_field_name'] = $default_field_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Alfresco\ObjectSerializer::sanitizeForSerialization($this));
    }
}


