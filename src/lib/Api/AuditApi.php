<?php
/**
 * AuditApi
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Api;

use \Alfresco\ApiClient;
use \Alfresco\ApiException;
use \Alfresco\Configuration;
use \Alfresco\ObjectSerializer;

/**
 * AuditApi Class Doc Comment
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditApi
{
    /**
     * API Client
     *
     * @var \Alfresco\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Alfresco\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Alfresco\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Alfresco\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Alfresco\ApiClient $apiClient set the API client
     *
     * @return AuditApi
     */
    public function setApiClient(\Alfresco\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteAuditEntriesForAuditApp
     *
     * Permanently delete audit entries for an audit application
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string $where Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60; *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60; (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteAuditEntriesForAuditApp($audit_application_id, $where)
    {
        list($response) = $this->deleteAuditEntriesForAuditAppWithHttpInfo($audit_application_id, $where);
        return $response;
    }

    /**
     * Operation deleteAuditEntriesForAuditAppWithHttpInfo
     *
     * Permanently delete audit entries for an audit application
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string $where Audit entries to permanently delete for an audit application, given an inclusive time period or range of ids. For example:  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60; *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60; (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAuditEntriesForAuditAppWithHttpInfo($audit_application_id, $where)
    {
        // verify the required parameter 'audit_application_id' is set
        if ($audit_application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_application_id when calling deleteAuditEntriesForAuditApp');
        }
        // verify the required parameter 'where' is set
        if ($where === null) {
            throw new \InvalidArgumentException('Missing the required parameter $where when calling deleteAuditEntriesForAuditApp');
        }
        // parse inputs
        $resourcePath = "/audit-applications/{auditApplicationId}/audit-entries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($audit_application_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditApplicationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_application_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/audit-applications/{auditApplicationId}/audit-entries'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAuditEntry
     *
     * Permanently delete an audit entry
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string $audit_entry_id The identifier of an audit entry. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteAuditEntry($audit_application_id, $audit_entry_id)
    {
        list($response) = $this->deleteAuditEntryWithHttpInfo($audit_application_id, $audit_entry_id);
        return $response;
    }

    /**
     * Operation deleteAuditEntryWithHttpInfo
     *
     * Permanently delete an audit entry
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string $audit_entry_id The identifier of an audit entry. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAuditEntryWithHttpInfo($audit_application_id, $audit_entry_id)
    {
        // verify the required parameter 'audit_application_id' is set
        if ($audit_application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_application_id when calling deleteAuditEntry');
        }
        // verify the required parameter 'audit_entry_id' is set
        if ($audit_entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_entry_id when calling deleteAuditEntry');
        }
        // parse inputs
        $resourcePath = "/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($audit_application_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditApplicationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_application_id),
                $resourcePath
            );
        }
        // path params
        if ($audit_entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditEntryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_entry_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAuditApp
     *
     * Get audit application info
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\AuditApp
     */
    public function getAuditApp($audit_application_id, $fields = null)
    {
        list($response) = $this->getAuditAppWithHttpInfo($audit_application_id, $fields);
        return $response;
    }

    /**
     * Operation getAuditAppWithHttpInfo
     *
     * Get audit application info
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\AuditApp, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuditAppWithHttpInfo($audit_application_id, $fields = null)
    {
        // verify the required parameter 'audit_application_id' is set
        if ($audit_application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_application_id when calling getAuditApp');
        }
        // parse inputs
        $resourcePath = "/audit-applications/{auditApplicationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($audit_application_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditApplicationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_application_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\AuditApp',
                '/audit-applications/{auditApplicationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\AuditApp', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\AuditApp', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAuditEntry
     *
     * Get audit entry
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string $audit_entry_id The identifier of an audit entry. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\AuditEntryEntry
     */
    public function getAuditEntry($audit_application_id, $audit_entry_id, $fields = null)
    {
        list($response) = $this->getAuditEntryWithHttpInfo($audit_application_id, $audit_entry_id, $fields);
        return $response;
    }

    /**
     * Operation getAuditEntryWithHttpInfo
     *
     * Get audit entry
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param string $audit_entry_id The identifier of an audit entry. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\AuditEntryEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuditEntryWithHttpInfo($audit_application_id, $audit_entry_id, $fields = null)
    {
        // verify the required parameter 'audit_application_id' is set
        if ($audit_application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_application_id when calling getAuditEntry');
        }
        // verify the required parameter 'audit_entry_id' is set
        if ($audit_entry_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_entry_id when calling getAuditEntry');
        }
        // parse inputs
        $resourcePath = "/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($audit_application_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditApplicationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_application_id),
                $resourcePath
            );
        }
        // path params
        if ($audit_entry_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditEntryId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_entry_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\AuditEntryEntry',
                '/audit-applications/{auditApplicationId}/audit-entries/{auditEntryId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\AuditEntryEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\AuditEntryEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listAuditApps
     *
     * List audit applications
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\AuditAppPaging
     */
    public function listAuditApps($skip_count = '0', $max_items = '100', $fields = null)
    {
        list($response) = $this->listAuditAppsWithHttpInfo($skip_count, $max_items, $fields);
        return $response;
    }

    /**
     * Operation listAuditAppsWithHttpInfo
     *
     * List audit applications
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\AuditAppPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAuditAppsWithHttpInfo($skip_count = '0', $max_items = '100', $fields = null)
    {
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling AuditApi.listAuditApps, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling AuditApi.listAuditApps, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/audit-applications";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\AuditAppPaging',
                '/audit-applications'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\AuditAppPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\AuditAppPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listAuditEntriesForAuditApp
     *
     * List audit entries for an audit application
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string $where Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/login/user&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/transaction/action&#39; and valuesValue&#x3D;&#39;DELETE&#39;)&#x60;&#x60;&#x60; (optional)
     * @param string[] $include Returns additional information about the audit entry. The following optional fields can be requested: * values (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\AuditEntryPaging
     */
    public function listAuditEntriesForAuditApp($audit_application_id, $skip_count = '0', $order_by = null, $max_items = '100', $where = null, $include = null, $fields = null)
    {
        list($response) = $this->listAuditEntriesForAuditAppWithHttpInfo($audit_application_id, $skip_count, $order_by, $max_items, $where, $include, $fields);
        return $response;
    }

    /**
     * Operation listAuditEntriesForAuditAppWithHttpInfo
     *
     * List audit entries for an audit application
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string $where Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(id BETWEEN (&#39;1234&#39;, &#39;4321&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/login/user&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(valuesKey&#x3D;&#39;/alfresco-access/transaction/action&#39; and valuesValue&#x3D;&#39;DELETE&#39;)&#x60;&#x60;&#x60; (optional)
     * @param string[] $include Returns additional information about the audit entry. The following optional fields can be requested: * values (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\AuditEntryPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAuditEntriesForAuditAppWithHttpInfo($audit_application_id, $skip_count = '0', $order_by = null, $max_items = '100', $where = null, $include = null, $fields = null)
    {
        // verify the required parameter 'audit_application_id' is set
        if ($audit_application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_application_id when calling listAuditEntriesForAuditApp');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling AuditApi.listAuditEntriesForAuditApp, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling AuditApi.listAuditEntriesForAuditApp, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/audit-applications/{auditApplicationId}/audit-entries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'csv', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($audit_application_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditApplicationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_application_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\AuditEntryPaging',
                '/audit-applications/{auditApplicationId}/audit-entries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\AuditEntryPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\AuditEntryPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listAuditEntriesForNode
     *
     * List audit entries for a node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string $where Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60; (optional)
     * @param string[] $include Returns additional information about the audit entry. The following optional fields can be requested: * values (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\AuditEntryPaging
     */
    public function listAuditEntriesForNode($node_id, $skip_count = '0', $order_by = null, $max_items = '100', $where = null, $include = null, $fields = null)
    {
        list($response) = $this->listAuditEntriesForNodeWithHttpInfo($node_id, $skip_count, $order_by, $max_items, $where, $include, $fields);
        return $response;
    }

    /**
     * Operation listAuditEntriesForNodeWithHttpInfo
     *
     * List audit entries for a node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string $where Optionally filter the list. Here are some examples:  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;-me-&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60;  *   &#x60;&#x60;&#x60;where&#x3D;(createdByUser&#x3D;&#39;jbloggs&#39; and createdAt BETWEEN (&#39;2017-06-02T12:13:51.593+01:00&#39; , &#39;2017-06-04T10:05:16.536+01:00&#39;)&#x60;&#x60;&#x60; (optional)
     * @param string[] $include Returns additional information about the audit entry. The following optional fields can be requested: * values (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\AuditEntryPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAuditEntriesForNodeWithHttpInfo($node_id, $skip_count = '0', $order_by = null, $max_items = '100', $where = null, $include = null, $fields = null)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling listAuditEntriesForNode');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling AuditApi.listAuditEntriesForNode, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling AuditApi.listAuditEntriesForNode, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/nodes/{nodeId}/audit-entries";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'csv', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\AuditEntryPaging',
                '/nodes/{nodeId}/audit-entries'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\AuditEntryPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\AuditEntryPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAuditApp
     *
     * Update audit application info
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param \Alfresco\Model\AuditBodyUpdate $audit_app_body_update The audit application to update. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\AuditApp
     */
    public function updateAuditApp($audit_application_id, $audit_app_body_update, $fields = null)
    {
        list($response) = $this->updateAuditAppWithHttpInfo($audit_application_id, $audit_app_body_update, $fields);
        return $response;
    }

    /**
     * Operation updateAuditAppWithHttpInfo
     *
     * Update audit application info
     *
     * @param string $audit_application_id The identifier of an audit application. (required)
     * @param \Alfresco\Model\AuditBodyUpdate $audit_app_body_update The audit application to update. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\AuditApp, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAuditAppWithHttpInfo($audit_application_id, $audit_app_body_update, $fields = null)
    {
        // verify the required parameter 'audit_application_id' is set
        if ($audit_application_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_application_id when calling updateAuditApp');
        }
        // verify the required parameter 'audit_app_body_update' is set
        if ($audit_app_body_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $audit_app_body_update when calling updateAuditApp');
        }
        // parse inputs
        $resourcePath = "/audit-applications/{auditApplicationId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($audit_application_id !== null) {
            $resourcePath = str_replace(
                "{" . "auditApplicationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($audit_application_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($audit_app_body_update)) {
            $_tempBody = $audit_app_body_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\AuditApp',
                '/audit-applications/{auditApplicationId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\AuditApp', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\AuditApp', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
