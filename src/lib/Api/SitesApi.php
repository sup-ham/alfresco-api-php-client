<?php
/**
 * SitesApi
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Api;

use \Alfresco\ApiClient;
use \Alfresco\ApiException;
use \Alfresco\Configuration;
use \Alfresco\ObjectSerializer;

/**
 * SitesApi Class Doc Comment
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SitesApi
{
    /**
     * API Client
     *
     * @var \Alfresco\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Alfresco\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Alfresco\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Alfresco\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Alfresco\ApiClient $apiClient set the API client
     *
     * @return SitesApi
     */
    public function setApiClient(\Alfresco\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createSite
     *
     * Create a site
     *
     * @param \Alfresco\Model\SiteBodyCreate $site_body_create The site details (required)
     * @param bool $skip_configuration Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created. (optional, default to false)
     * @param bool $skip_add_to_favorites Flag to indicate whether the site should not be added to the user&#39;s site favorites. (optional, default to false)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteEntry
     */
    public function createSite($site_body_create, $skip_configuration = 'false', $skip_add_to_favorites = 'false', $fields = null)
    {
        list($response) = $this->createSiteWithHttpInfo($site_body_create, $skip_configuration, $skip_add_to_favorites, $fields);
        return $response;
    }

    /**
     * Operation createSiteWithHttpInfo
     *
     * Create a site
     *
     * @param \Alfresco\Model\SiteBodyCreate $site_body_create The site details (required)
     * @param bool $skip_configuration Flag to indicate whether the Share-specific (surf) configuration files for the site should not be created. (optional, default to false)
     * @param bool $skip_add_to_favorites Flag to indicate whether the site should not be added to the user&#39;s site favorites. (optional, default to false)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSiteWithHttpInfo($site_body_create, $skip_configuration = 'false', $skip_add_to_favorites = 'false', $fields = null)
    {
        // verify the required parameter 'site_body_create' is set
        if ($site_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_body_create when calling createSite');
        }
        // parse inputs
        $resourcePath = "/sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_configuration !== null) {
            $queryParams['skipConfiguration'] = $this->apiClient->getSerializer()->toQueryValue($skip_configuration);
        }
        // query params
        if ($skip_add_to_favorites !== null) {
            $queryParams['skipAddToFavorites'] = $this->apiClient->getSerializer()->toQueryValue($skip_add_to_favorites);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // body params
        $_tempBody = null;
        if (isset($site_body_create)) {
            $_tempBody = $site_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteEntry',
                '/sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSiteMembership
     *
     * Create a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param \Alfresco\Model\SiteMembershipBodyCreate $site_membership_body_create The person to add and their role (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMemberEntry
     */
    public function createSiteMembership($site_id, $site_membership_body_create, $fields = null)
    {
        list($response) = $this->createSiteMembershipWithHttpInfo($site_id, $site_membership_body_create, $fields);
        return $response;
    }

    /**
     * Operation createSiteMembershipWithHttpInfo
     *
     * Create a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param \Alfresco\Model\SiteMembershipBodyCreate $site_membership_body_create The person to add and their role (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMemberEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSiteMembershipWithHttpInfo($site_id, $site_membership_body_create, $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling createSiteMembership');
        }
        // verify the required parameter 'site_membership_body_create' is set
        if ($site_membership_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_membership_body_create when calling createSiteMembership');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}/members";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($site_membership_body_create)) {
            $_tempBody = $site_membership_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMemberEntry',
                '/sites/{siteId}/members'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMemberEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMemberEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSiteMembershipRequestForPerson
     *
     * Create a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\SiteMembershipRequestBodyCreate $site_membership_request_body_create Site membership request details (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMembershipRequestEntry
     */
    public function createSiteMembershipRequestForPerson($person_id, $site_membership_request_body_create, $fields = null)
    {
        list($response) = $this->createSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_membership_request_body_create, $fields);
        return $response;
    }

    /**
     * Operation createSiteMembershipRequestForPersonWithHttpInfo
     *
     * Create a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\SiteMembershipRequestBodyCreate $site_membership_request_body_create Site membership request details (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMembershipRequestEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_membership_request_body_create, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling createSiteMembershipRequestForPerson');
        }
        // verify the required parameter 'site_membership_request_body_create' is set
        if ($site_membership_request_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_membership_request_body_create when calling createSiteMembershipRequestForPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/site-membership-requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($site_membership_request_body_create)) {
            $_tempBody = $site_membership_request_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMembershipRequestEntry',
                '/people/{personId}/site-membership-requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMembershipRequestEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMembershipRequestEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSite
     *
     * Delete a site
     *
     * @param string $site_id The identifier of a site. (required)
     * @param bool $permanent Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan. (optional, default to false)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteSite($site_id, $permanent = 'false')
    {
        list($response) = $this->deleteSiteWithHttpInfo($site_id, $permanent);
        return $response;
    }

    /**
     * Operation deleteSiteWithHttpInfo
     *
     * Delete a site
     *
     * @param string $site_id The identifier of a site. (required)
     * @param bool $permanent Flag to indicate whether the site should be permanently deleted i.e. bypass the trashcan. (optional, default to false)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSiteWithHttpInfo($site_id, $permanent = 'false')
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deleteSite');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($permanent !== null) {
            $queryParams['permanent'] = $this->apiClient->getSerializer()->toQueryValue($permanent);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sites/{siteId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSiteMembership
     *
     * Delete a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $person_id The identifier of a person. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteSiteMembership($site_id, $person_id)
    {
        list($response) = $this->deleteSiteMembershipWithHttpInfo($site_id, $person_id);
        return $response;
    }

    /**
     * Operation deleteSiteMembershipWithHttpInfo
     *
     * Delete a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $person_id The identifier of a person. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSiteMembershipWithHttpInfo($site_id, $person_id)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deleteSiteMembership');
        }
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling deleteSiteMembership');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}/members/{personId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sites/{siteId}/members/{personId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSiteMembershipForPerson
     *
     * Delete a site membership
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteSiteMembershipForPerson($person_id, $site_id)
    {
        list($response) = $this->deleteSiteMembershipForPersonWithHttpInfo($person_id, $site_id);
        return $response;
    }

    /**
     * Operation deleteSiteMembershipForPersonWithHttpInfo
     *
     * Delete a site membership
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSiteMembershipForPersonWithHttpInfo($person_id, $site_id)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling deleteSiteMembershipForPerson');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deleteSiteMembershipForPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/sites/{siteId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSiteMembershipRequestForPerson
     *
     * Delete a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteSiteMembershipRequestForPerson($person_id, $site_id)
    {
        list($response) = $this->deleteSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_id);
        return $response;
    }

    /**
     * Operation deleteSiteMembershipRequestForPersonWithHttpInfo
     *
     * Delete a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_id)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling deleteSiteMembershipRequestForPerson');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deleteSiteMembershipRequestForPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/site-membership-requests/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/site-membership-requests/{siteId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSite
     *
     * Get a site
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string[] $relations Use the relations parameter to include one or more related entities in a single response. (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteEntry
     */
    public function getSite($site_id, $relations = null, $fields = null)
    {
        list($response) = $this->getSiteWithHttpInfo($site_id, $relations, $fields);
        return $response;
    }

    /**
     * Operation getSiteWithHttpInfo
     *
     * Get a site
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string[] $relations Use the relations parameter to include one or more related entities in a single response. (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSiteWithHttpInfo($site_id, $relations = null, $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getSite');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($relations)) {
            $relations = $this->apiClient->getSerializer()->serializeCollection($relations, 'csv', true);
        }
        if ($relations !== null) {
            $queryParams['relations'] = $this->apiClient->getSerializer()->toQueryValue($relations);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteEntry',
                '/sites/{siteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSiteContainer
     *
     * Get a site container
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $container_id The unique identifier of a site container. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteContainerEntry
     */
    public function getSiteContainer($site_id, $container_id, $fields = null)
    {
        list($response) = $this->getSiteContainerWithHttpInfo($site_id, $container_id, $fields);
        return $response;
    }

    /**
     * Operation getSiteContainerWithHttpInfo
     *
     * Get a site container
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $container_id The unique identifier of a site container. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteContainerEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSiteContainerWithHttpInfo($site_id, $container_id, $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getSiteContainer');
        }
        // verify the required parameter 'container_id' is set
        if ($container_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $container_id when calling getSiteContainer');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}/containers/{containerId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($container_id !== null) {
            $resourcePath = str_replace(
                "{" . "containerId" . "}",
                $this->apiClient->getSerializer()->toPathValue($container_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteContainerEntry',
                '/sites/{siteId}/containers/{containerId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteContainerEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteContainerEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSiteMembership
     *
     * Get a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $person_id The identifier of a person. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMemberEntry
     */
    public function getSiteMembership($site_id, $person_id, $fields = null)
    {
        list($response) = $this->getSiteMembershipWithHttpInfo($site_id, $person_id, $fields);
        return $response;
    }

    /**
     * Operation getSiteMembershipWithHttpInfo
     *
     * Get a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $person_id The identifier of a person. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMemberEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSiteMembershipWithHttpInfo($site_id, $person_id, $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getSiteMembership');
        }
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getSiteMembership');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}/members/{personId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMemberEntry',
                '/sites/{siteId}/members/{personId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMemberEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMemberEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSiteMembershipForPerson
     *
     * Get a site membership
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteRoleEntry
     */
    public function getSiteMembershipForPerson($person_id, $site_id)
    {
        list($response) = $this->getSiteMembershipForPersonWithHttpInfo($person_id, $site_id);
        return $response;
    }

    /**
     * Operation getSiteMembershipForPersonWithHttpInfo
     *
     * Get a site membership
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteRoleEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSiteMembershipForPersonWithHttpInfo($person_id, $site_id)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getSiteMembershipForPerson');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getSiteMembershipForPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteRoleEntry',
                '/people/{personId}/sites/{siteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteRoleEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteRoleEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getSiteMembershipRequestForPerson
     *
     * Get a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMembershipRequestEntry
     */
    public function getSiteMembershipRequestForPerson($person_id, $site_id, $fields = null)
    {
        list($response) = $this->getSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_id, $fields);
        return $response;
    }

    /**
     * Operation getSiteMembershipRequestForPersonWithHttpInfo
     *
     * Get a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMembershipRequestEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_id, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getSiteMembershipRequestForPerson');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getSiteMembershipRequestForPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/site-membership-requests/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMembershipRequestEntry',
                '/people/{personId}/site-membership-requests/{siteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMembershipRequestEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMembershipRequestEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSiteContainers
     *
     * List site containers
     *
     * @param string $site_id The identifier of a site. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteContainerPaging
     */
    public function listSiteContainers($site_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        list($response) = $this->listSiteContainersWithHttpInfo($site_id, $skip_count, $max_items, $fields);
        return $response;
    }

    /**
     * Operation listSiteContainersWithHttpInfo
     *
     * List site containers
     *
     * @param string $site_id The identifier of a site. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteContainerPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSiteContainersWithHttpInfo($site_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling listSiteContainers');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling SitesApi.listSiteContainers, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling SitesApi.listSiteContainers, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/sites/{siteId}/containers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteContainerPaging',
                '/sites/{siteId}/containers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteContainerPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteContainerPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSiteMembershipRequestsForPerson
     *
     * List site membership requests
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMembershipRequestPaging
     */
    public function listSiteMembershipRequestsForPerson($person_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        list($response) = $this->listSiteMembershipRequestsForPersonWithHttpInfo($person_id, $skip_count, $max_items, $fields);
        return $response;
    }

    /**
     * Operation listSiteMembershipRequestsForPersonWithHttpInfo
     *
     * List site membership requests
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMembershipRequestPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSiteMembershipRequestsForPersonWithHttpInfo($person_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling listSiteMembershipRequestsForPerson');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling SitesApi.listSiteMembershipRequestsForPerson, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling SitesApi.listSiteMembershipRequestsForPerson, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/people/{personId}/site-membership-requests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMembershipRequestPaging',
                '/people/{personId}/site-membership-requests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMembershipRequestPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMembershipRequestPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSiteMemberships
     *
     * List site memberships
     *
     * @param string $site_id The identifier of a site. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMemberPaging
     */
    public function listSiteMemberships($site_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        list($response) = $this->listSiteMembershipsWithHttpInfo($site_id, $skip_count, $max_items, $fields);
        return $response;
    }

    /**
     * Operation listSiteMembershipsWithHttpInfo
     *
     * List site memberships
     *
     * @param string $site_id The identifier of a site. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMemberPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSiteMembershipsWithHttpInfo($site_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling listSiteMemberships');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling SitesApi.listSiteMemberships, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling SitesApi.listSiteMemberships, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/sites/{siteId}/members";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMemberPaging',
                '/sites/{siteId}/members'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMemberPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMemberPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSiteMembershipsForPerson
     *
     * List site memberships
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param string[] $relations Use the relations parameter to include one or more related entities in a single response. (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteRolePaging
     */
    public function listSiteMembershipsForPerson($person_id, $skip_count = '0', $max_items = '100', $order_by = null, $relations = null, $fields = null, $where = null)
    {
        list($response) = $this->listSiteMembershipsForPersonWithHttpInfo($person_id, $skip_count, $max_items, $order_by, $relations, $fields, $where);
        return $response;
    }

    /**
     * Operation listSiteMembershipsForPersonWithHttpInfo
     *
     * List site memberships
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param string[] $relations Use the relations parameter to include one or more related entities in a single response. (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteRolePaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSiteMembershipsForPersonWithHttpInfo($person_id, $skip_count = '0', $max_items = '100', $order_by = null, $relations = null, $fields = null, $where = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling listSiteMembershipsForPerson');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling SitesApi.listSiteMembershipsForPerson, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling SitesApi.listSiteMembershipsForPerson, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/people/{personId}/sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'csv', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if (is_array($relations)) {
            $relations = $this->apiClient->getSerializer()->serializeCollection($relations, 'csv', true);
        }
        if ($relations !== null) {
            $queryParams['relations'] = $this->apiClient->getSerializer()->toQueryValue($relations);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteRolePaging',
                '/people/{personId}/sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteRolePaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteRolePaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listSites
     *
     * List sites
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param string[] $relations Use the relations parameter to include one or more related entities in a single response. (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SitePaging
     */
    public function listSites($skip_count = '0', $max_items = '100', $order_by = null, $relations = null, $fields = null, $where = null)
    {
        list($response) = $this->listSitesWithHttpInfo($skip_count, $max_items, $order_by, $relations, $fields, $where);
        return $response;
    }

    /**
     * Operation listSitesWithHttpInfo
     *
     * List sites
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param string[] $relations Use the relations parameter to include one or more related entities in a single response. (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SitePaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSitesWithHttpInfo($skip_count = '0', $max_items = '100', $order_by = null, $relations = null, $fields = null, $where = null)
    {
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling SitesApi.listSites, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling SitesApi.listSites, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'csv', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if (is_array($relations)) {
            $relations = $this->apiClient->getSerializer()->serializeCollection($relations, 'csv', true);
        }
        if ($relations !== null) {
            $queryParams['relations'] = $this->apiClient->getSerializer()->toQueryValue($relations);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SitePaging',
                '/sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SitePaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SitePaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSite
     *
     * Update a site
     *
     * @param string $site_id The identifier of a site. (required)
     * @param \Alfresco\Model\SiteBodyUpdate $site_body_update The site information to update. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteEntry
     */
    public function updateSite($site_id, $site_body_update, $fields = null)
    {
        list($response) = $this->updateSiteWithHttpInfo($site_id, $site_body_update, $fields);
        return $response;
    }

    /**
     * Operation updateSiteWithHttpInfo
     *
     * Update a site
     *
     * @param string $site_id The identifier of a site. (required)
     * @param \Alfresco\Model\SiteBodyUpdate $site_body_update The site information to update. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSiteWithHttpInfo($site_id, $site_body_update, $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling updateSite');
        }
        // verify the required parameter 'site_body_update' is set
        if ($site_body_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_body_update when calling updateSite');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($site_body_update)) {
            $_tempBody = $site_body_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteEntry',
                '/sites/{siteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSiteMembership
     *
     * Update a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\SiteMembershipBodyUpdate $site_membership_body_update The persons new role (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMemberEntry
     */
    public function updateSiteMembership($site_id, $person_id, $site_membership_body_update, $fields = null)
    {
        list($response) = $this->updateSiteMembershipWithHttpInfo($site_id, $person_id, $site_membership_body_update, $fields);
        return $response;
    }

    /**
     * Operation updateSiteMembershipWithHttpInfo
     *
     * Update a site membership
     *
     * @param string $site_id The identifier of a site. (required)
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\SiteMembershipBodyUpdate $site_membership_body_update The persons new role (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMemberEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSiteMembershipWithHttpInfo($site_id, $person_id, $site_membership_body_update, $fields = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling updateSiteMembership');
        }
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling updateSiteMembership');
        }
        // verify the required parameter 'site_membership_body_update' is set
        if ($site_membership_body_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_membership_body_update when calling updateSiteMembership');
        }
        // parse inputs
        $resourcePath = "/sites/{siteId}/members/{personId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($site_membership_body_update)) {
            $_tempBody = $site_membership_body_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMemberEntry',
                '/sites/{siteId}/members/{personId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMemberEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMemberEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateSiteMembershipRequestForPerson
     *
     * Update a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @param \Alfresco\Model\SiteMembershipRequestBodyUpdate $site_membership_request_body_update The new message to display (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteMembershipRequestEntry
     */
    public function updateSiteMembershipRequestForPerson($person_id, $site_id, $site_membership_request_body_update, $fields = null)
    {
        list($response) = $this->updateSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_id, $site_membership_request_body_update, $fields);
        return $response;
    }

    /**
     * Operation updateSiteMembershipRequestForPersonWithHttpInfo
     *
     * Update a site membership request
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @param \Alfresco\Model\SiteMembershipRequestBodyUpdate $site_membership_request_body_update The new message to display (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteMembershipRequestEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSiteMembershipRequestForPersonWithHttpInfo($person_id, $site_id, $site_membership_request_body_update, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling updateSiteMembershipRequestForPerson');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling updateSiteMembershipRequestForPerson');
        }
        // verify the required parameter 'site_membership_request_body_update' is set
        if ($site_membership_request_body_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_membership_request_body_update when calling updateSiteMembershipRequestForPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/site-membership-requests/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($site_membership_request_body_update)) {
            $_tempBody = $site_membership_request_body_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteMembershipRequestEntry',
                '/people/{personId}/site-membership-requests/{siteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteMembershipRequestEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteMembershipRequestEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
