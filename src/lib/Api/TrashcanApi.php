<?php
/**
 * TrashcanApi
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Api;

use \Alfresco\ApiClient;
use \Alfresco\ApiException;
use \Alfresco\Configuration;
use \Alfresco\ObjectSerializer;

/**
 * TrashcanApi Class Doc Comment
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrashcanApi
{
    /**
     * API Client
     *
     * @var \Alfresco\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Alfresco\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Alfresco\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Alfresco\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Alfresco\ApiClient $apiClient set the API client
     *
     * @return TrashcanApi
     */
    public function setApiClient(\Alfresco\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation deleteDeletedNode
     *
     * Permanently delete a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteDeletedNode($node_id)
    {
        list($response) = $this->deleteDeletedNodeWithHttpInfo($node_id);
        return $response;
    }

    /**
     * Operation deleteDeletedNodeWithHttpInfo
     *
     * Permanently delete a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDeletedNodeWithHttpInfo($node_id)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling deleteDeletedNode');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deleted-nodes/{nodeId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getArchivedNodeRendition
     *
     * Get rendition information for a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string $rendition_id The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\RenditionEntry
     */
    public function getArchivedNodeRendition($node_id, $rendition_id)
    {
        list($response) = $this->getArchivedNodeRenditionWithHttpInfo($node_id, $rendition_id);
        return $response;
    }

    /**
     * Operation getArchivedNodeRenditionWithHttpInfo
     *
     * Get rendition information for a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string $rendition_id The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\RenditionEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArchivedNodeRenditionWithHttpInfo($node_id, $rendition_id)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling getArchivedNodeRendition');
        }
        // verify the required parameter 'rendition_id' is set
        if ($rendition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rendition_id when calling getArchivedNodeRendition');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}/renditions/{renditionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($rendition_id !== null) {
            $resourcePath = str_replace(
                "{" . "renditionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($rendition_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\RenditionEntry',
                '/deleted-nodes/{nodeId}/renditions/{renditionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\RenditionEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\RenditionEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getArchivedNodeRenditionContent
     *
     * Get rendition content of a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string $rendition_id The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param bool $attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. (optional, default to true)
     * @param \DateTime $if_modified_since Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. (optional)
     * @param bool $placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response. (optional, default to false)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function getArchivedNodeRenditionContent($node_id, $rendition_id, $attachment = 'true', $if_modified_since = null, $placeholder = 'false')
    {
        list($response) = $this->getArchivedNodeRenditionContentWithHttpInfo($node_id, $rendition_id, $attachment, $if_modified_since, $placeholder);
        return $response;
    }

    /**
     * Operation getArchivedNodeRenditionContentWithHttpInfo
     *
     * Get rendition content of a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string $rendition_id The name of a thumbnail rendition, for example *doclib*, or *pdf*. (required)
     * @param bool $attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. (optional, default to true)
     * @param \DateTime $if_modified_since Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. (optional)
     * @param bool $placeholder If **true** and there is no rendition for this **nodeId** and **renditionId**, then the placeholder image for the mime type of this rendition is returned, rather than a 404 response. (optional, default to false)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArchivedNodeRenditionContentWithHttpInfo($node_id, $rendition_id, $attachment = 'true', $if_modified_since = null, $placeholder = 'false')
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling getArchivedNodeRenditionContent');
        }
        // verify the required parameter 'rendition_id' is set
        if ($rendition_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rendition_id when calling getArchivedNodeRenditionContent');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}/renditions/{renditionId}/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($attachment !== null) {
            $queryParams['attachment'] = $this->apiClient->getSerializer()->toQueryValue($attachment);
        }
        // query params
        if ($placeholder !== null) {
            $queryParams['placeholder'] = $this->apiClient->getSerializer()->toQueryValue($placeholder);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($rendition_id !== null) {
            $resourcePath = str_replace(
                "{" . "renditionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($rendition_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deleted-nodes/{nodeId}/renditions/{renditionId}/content'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDeletedNode
     *
     * Get a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string[] $include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isLocked * path * permissions (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\DeletedNodeEntry
     */
    public function getDeletedNode($node_id, $include = null)
    {
        list($response) = $this->getDeletedNodeWithHttpInfo($node_id, $include);
        return $response;
    }

    /**
     * Operation getDeletedNodeWithHttpInfo
     *
     * Get a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string[] $include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * association * isLink * isLocked * path * permissions (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\DeletedNodeEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeletedNodeWithHttpInfo($node_id, $include = null)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling getDeletedNode');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\DeletedNodeEntry',
                '/deleted-nodes/{nodeId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\DeletedNodeEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\DeletedNodeEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDeletedNodeContent
     *
     * Get deleted node content
     *
     * @param string $node_id The identifier of a node. (required)
     * @param bool $attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. (optional, default to true)
     * @param \DateTime $if_modified_since Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function getDeletedNodeContent($node_id, $attachment = 'true', $if_modified_since = null)
    {
        list($response) = $this->getDeletedNodeContentWithHttpInfo($node_id, $attachment, $if_modified_since);
        return $response;
    }

    /**
     * Operation getDeletedNodeContentWithHttpInfo
     *
     * Get deleted node content
     *
     * @param string $node_id The identifier of a node. (required)
     * @param bool $attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. (optional, default to true)
     * @param \DateTime $if_modified_since Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeletedNodeContentWithHttpInfo($node_id, $attachment = 'true', $if_modified_since = null)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling getDeletedNodeContent');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}/content";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($attachment !== null) {
            $queryParams['attachment'] = $this->apiClient->getSerializer()->toQueryValue($attachment);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/deleted-nodes/{nodeId}/content'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listDeletedNodeRenditions
     *
     * List renditions for a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\RenditionPaging
     */
    public function listDeletedNodeRenditions($node_id, $where = null)
    {
        list($response) = $this->listDeletedNodeRenditionsWithHttpInfo($node_id, $where);
        return $response;
    }

    /**
     * Operation listDeletedNodeRenditionsWithHttpInfo
     *
     * List renditions for a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\RenditionPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeletedNodeRenditionsWithHttpInfo($node_id, $where = null)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling listDeletedNodeRenditions');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}/renditions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\RenditionPaging',
                '/deleted-nodes/{nodeId}/renditions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\RenditionPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\RenditionPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listDeletedNodes
     *
     * List deleted nodes
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isLocked * path * properties * permissions (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\DeletedNodesPaging
     */
    public function listDeletedNodes($skip_count = '0', $max_items = '100', $include = null)
    {
        list($response) = $this->listDeletedNodesWithHttpInfo($skip_count, $max_items, $include);
        return $response;
    }

    /**
     * Operation listDeletedNodesWithHttpInfo
     *
     * List deleted nodes
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $include Returns additional information about the node. The following optional fields can be requested: * allowableOperations * aspectNames * association * isLink * isLocked * path * properties * permissions (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\DeletedNodesPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeletedNodesWithHttpInfo($skip_count = '0', $max_items = '100', $include = null)
    {
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling TrashcanApi.listDeletedNodes, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling TrashcanApi.listDeletedNodes, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/deleted-nodes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\DeletedNodesPaging',
                '/deleted-nodes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\DeletedNodesPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\DeletedNodesPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation restoreDeletedNode
     *
     * Restore a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\NodeEntry
     */
    public function restoreDeletedNode($node_id, $fields = null)
    {
        list($response) = $this->restoreDeletedNodeWithHttpInfo($node_id, $fields);
        return $response;
    }

    /**
     * Operation restoreDeletedNodeWithHttpInfo
     *
     * Restore a deleted node
     *
     * @param string $node_id The identifier of a node. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\NodeEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreDeletedNodeWithHttpInfo($node_id, $fields = null)
    {
        // verify the required parameter 'node_id' is set
        if ($node_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $node_id when calling restoreDeletedNode');
        }
        // parse inputs
        $resourcePath = "/deleted-nodes/{nodeId}/restore";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                "{" . "nodeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($node_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\NodeEntry',
                '/deleted-nodes/{nodeId}/restore'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\NodeEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\NodeEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
