<?php
/**
 * DownloadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Api;

use \Alfresco\ApiClient;
use \Alfresco\ApiException;
use \Alfresco\Configuration;
use \Alfresco\ObjectSerializer;

/**
 * DownloadsApi Class Doc Comment
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DownloadsApi
{
    /**
     * API Client
     *
     * @var \Alfresco\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Alfresco\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Alfresco\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Alfresco\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Alfresco\ApiClient $apiClient set the API client
     *
     * @return DownloadsApi
     */
    public function setApiClient(\Alfresco\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation cancelDownload
     *
     * Cancel a download
     *
     * @param string $download_id The identifier of a download node. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function cancelDownload($download_id)
    {
        list($response) = $this->cancelDownloadWithHttpInfo($download_id);
        return $response;
    }

    /**
     * Operation cancelDownloadWithHttpInfo
     *
     * Cancel a download
     *
     * @param string $download_id The identifier of a download node. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelDownloadWithHttpInfo($download_id)
    {
        // verify the required parameter 'download_id' is set
        if ($download_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $download_id when calling cancelDownload');
        }
        // parse inputs
        $resourcePath = "/downloads/{downloadId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($download_id !== null) {
            $resourcePath = str_replace(
                "{" . "downloadId" . "}",
                $this->apiClient->getSerializer()->toPathValue($download_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/downloads/{downloadId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createDownload
     *
     * Create a new download
     *
     * @param \Alfresco\Model\DownloadBodyCreate $download_body_create The nodeIds the content of which will be zipped, which zip will be set as the content of our download node. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\DownloadEntry
     */
    public function createDownload($download_body_create, $fields = null)
    {
        list($response) = $this->createDownloadWithHttpInfo($download_body_create, $fields);
        return $response;
    }

    /**
     * Operation createDownloadWithHttpInfo
     *
     * Create a new download
     *
     * @param \Alfresco\Model\DownloadBodyCreate $download_body_create The nodeIds the content of which will be zipped, which zip will be set as the content of our download node. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\DownloadEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDownloadWithHttpInfo($download_body_create, $fields = null)
    {
        // verify the required parameter 'download_body_create' is set
        if ($download_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $download_body_create when calling createDownload');
        }
        // parse inputs
        $resourcePath = "/downloads";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // body params
        $_tempBody = null;
        if (isset($download_body_create)) {
            $_tempBody = $download_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\DownloadEntry',
                '/downloads'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\DownloadEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\DownloadEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDownload
     *
     * Get a download
     *
     * @param string $download_id The identifier of a download node. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\DownloadEntry
     */
    public function getDownload($download_id, $fields = null)
    {
        list($response) = $this->getDownloadWithHttpInfo($download_id, $fields);
        return $response;
    }

    /**
     * Operation getDownloadWithHttpInfo
     *
     * Get a download
     *
     * @param string $download_id The identifier of a download node. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\DownloadEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDownloadWithHttpInfo($download_id, $fields = null)
    {
        // verify the required parameter 'download_id' is set
        if ($download_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $download_id when calling getDownload');
        }
        // parse inputs
        $resourcePath = "/downloads/{downloadId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($download_id !== null) {
            $resourcePath = str_replace(
                "{" . "downloadId" . "}",
                $this->apiClient->getSerializer()->toPathValue($download_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\DownloadEntry',
                '/downloads/{downloadId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\DownloadEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\DownloadEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
