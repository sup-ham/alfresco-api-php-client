<?php
/**
 * FavoritesApi
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Api;

use \Alfresco\ApiClient;
use \Alfresco\ApiException;
use \Alfresco\Configuration;
use \Alfresco\ObjectSerializer;

/**
 * FavoritesApi Class Doc Comment
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FavoritesApi
{
    /**
     * API Client
     *
     * @var \Alfresco\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Alfresco\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Alfresco\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Alfresco\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Alfresco\ApiClient $apiClient set the API client
     *
     * @return FavoritesApi
     */
    public function setApiClient(\Alfresco\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createFavorite
     *
     * Create a favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\FavoriteBodyCreate $favorite_body_create An object identifying the entity to be favorited.   The object consists of a single property which is an object with the name &#x60;site&#x60;, &#x60;file&#x60;, or &#x60;folder&#x60;.  The content of that object is the &#x60;guid&#x60; of the target entity.  For example, to favorite a file the following body would be used:  &#x60;&#x60;&#x60;JSON {    \&quot;target\&quot;: {       \&quot;file\&quot;: {          \&quot;guid\&quot;: \&quot;abcde-01234-....\&quot;       }    } } &#x60;&#x60;&#x60; (required)
     * @param string[] $include Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\FavoriteEntry
     */
    public function createFavorite($person_id, $favorite_body_create, $include = null, $fields = null)
    {
        list($response) = $this->createFavoriteWithHttpInfo($person_id, $favorite_body_create, $include, $fields);
        return $response;
    }

    /**
     * Operation createFavoriteWithHttpInfo
     *
     * Create a favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\FavoriteBodyCreate $favorite_body_create An object identifying the entity to be favorited.   The object consists of a single property which is an object with the name &#x60;site&#x60;, &#x60;file&#x60;, or &#x60;folder&#x60;.  The content of that object is the &#x60;guid&#x60; of the target entity.  For example, to favorite a file the following body would be used:  &#x60;&#x60;&#x60;JSON {    \&quot;target\&quot;: {       \&quot;file\&quot;: {          \&quot;guid\&quot;: \&quot;abcde-01234-....\&quot;       }    } } &#x60;&#x60;&#x60; (required)
     * @param string[] $include Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\FavoriteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createFavoriteWithHttpInfo($person_id, $favorite_body_create, $include = null, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling createFavorite');
        }
        // verify the required parameter 'favorite_body_create' is set
        if ($favorite_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $favorite_body_create when calling createFavorite');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/favorites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($favorite_body_create)) {
            $_tempBody = $favorite_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\FavoriteEntry',
                '/people/{personId}/favorites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\FavoriteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\FavoriteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createSiteFavorite
     *
     * Create a site favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\FavoriteSiteBodyCreate $favorite_site_body_create The id of the site to favorite. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\FavoriteSiteEntry
     */
    public function createSiteFavorite($person_id, $favorite_site_body_create, $fields = null)
    {
        list($response) = $this->createSiteFavoriteWithHttpInfo($person_id, $favorite_site_body_create, $fields);
        return $response;
    }

    /**
     * Operation createSiteFavoriteWithHttpInfo
     *
     * Create a site favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\FavoriteSiteBodyCreate $favorite_site_body_create The id of the site to favorite. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\FavoriteSiteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSiteFavoriteWithHttpInfo($person_id, $favorite_site_body_create, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling createSiteFavorite');
        }
        // verify the required parameter 'favorite_site_body_create' is set
        if ($favorite_site_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $favorite_site_body_create when calling createSiteFavorite');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/favorite-sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($favorite_site_body_create)) {
            $_tempBody = $favorite_site_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\FavoriteSiteEntry',
                '/people/{personId}/favorite-sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\FavoriteSiteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\FavoriteSiteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFavorite
     *
     * Delete a favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $favorite_id The identifier of a favorite. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteFavorite($person_id, $favorite_id)
    {
        list($response) = $this->deleteFavoriteWithHttpInfo($person_id, $favorite_id);
        return $response;
    }

    /**
     * Operation deleteFavoriteWithHttpInfo
     *
     * Delete a favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $favorite_id The identifier of a favorite. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFavoriteWithHttpInfo($person_id, $favorite_id)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling deleteFavorite');
        }
        // verify the required parameter 'favorite_id' is set
        if ($favorite_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $favorite_id when calling deleteFavorite');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/favorites/{favoriteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($favorite_id !== null) {
            $resourcePath = str_replace(
                "{" . "favoriteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($favorite_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/favorites/{favoriteId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteSiteFavorite
     *
     * Delete a site favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteSiteFavorite($person_id, $site_id)
    {
        list($response) = $this->deleteSiteFavoriteWithHttpInfo($person_id, $site_id);
        return $response;
    }

    /**
     * Operation deleteSiteFavoriteWithHttpInfo
     *
     * Delete a site favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSiteFavoriteWithHttpInfo($person_id, $site_id)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling deleteSiteFavorite');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling deleteSiteFavorite');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/favorite-sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/favorite-sites/{siteId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFavorite
     *
     * Get a favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $favorite_id The identifier of a favorite. (required)
     * @param string[] $include Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\FavoriteEntry
     */
    public function getFavorite($person_id, $favorite_id, $include = null, $fields = null)
    {
        list($response) = $this->getFavoriteWithHttpInfo($person_id, $favorite_id, $include, $fields);
        return $response;
    }

    /**
     * Operation getFavoriteWithHttpInfo
     *
     * Get a favorite
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $favorite_id The identifier of a favorite. (required)
     * @param string[] $include Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\FavoriteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFavoriteWithHttpInfo($person_id, $favorite_id, $include = null, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getFavorite');
        }
        // verify the required parameter 'favorite_id' is set
        if ($favorite_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $favorite_id when calling getFavorite');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/favorites/{favoriteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($favorite_id !== null) {
            $resourcePath = str_replace(
                "{" . "favoriteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($favorite_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\FavoriteEntry',
                '/people/{personId}/favorites/{favoriteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\FavoriteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\FavoriteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFavoriteSite
     *
     * Get a favorite site
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SiteEntry
     */
    public function getFavoriteSite($person_id, $site_id, $fields = null)
    {
        list($response) = $this->getFavoriteSiteWithHttpInfo($person_id, $site_id, $fields);
        return $response;
    }

    /**
     * Operation getFavoriteSiteWithHttpInfo
     *
     * Get a favorite site
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $site_id The identifier of a site. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SiteEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFavoriteSiteWithHttpInfo($person_id, $site_id, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getFavoriteSite');
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $site_id when calling getFavoriteSite');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/favorite-sites/{siteId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // path params
        if ($site_id !== null) {
            $resourcePath = str_replace(
                "{" . "siteId" . "}",
                $this->apiClient->getSerializer()->toPathValue($site_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SiteEntry',
                '/people/{personId}/favorite-sites/{siteId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SiteEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SiteEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFavoriteSitesForPerson
     *
     * List favorite sites
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\SitePaging
     */
    public function listFavoriteSitesForPerson($person_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        list($response) = $this->listFavoriteSitesForPersonWithHttpInfo($person_id, $skip_count, $max_items, $fields);
        return $response;
    }

    /**
     * Operation listFavoriteSitesForPersonWithHttpInfo
     *
     * List favorite sites
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\SitePaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFavoriteSitesForPersonWithHttpInfo($person_id, $skip_count = '0', $max_items = '100', $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling listFavoriteSitesForPerson');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling FavoritesApi.listFavoriteSitesForPerson, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling FavoritesApi.listFavoriteSitesForPerson, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/people/{personId}/favorite-sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\SitePaging',
                '/people/{personId}/favorite-sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\SitePaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\SitePaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listFavorites
     *
     * List favorites
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @param string[] $include Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\FavoritePaging
     */
    public function listFavorites($person_id, $skip_count = '0', $max_items = '100', $where = null, $include = null, $fields = null)
    {
        list($response) = $this->listFavoritesWithHttpInfo($person_id, $skip_count, $max_items, $where, $include, $fields);
        return $response;
    }

    /**
     * Operation listFavoritesWithHttpInfo
     *
     * List favorites
     *
     * @param string $person_id The identifier of a person. (required)
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string $where A string to restrict the returned objects by using a predicate. (optional)
     * @param string[] $include Returns additional information about favorites, the following optional fields can be requested: * path (note, this only applies to files and folders) (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\FavoritePaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listFavoritesWithHttpInfo($person_id, $skip_count = '0', $max_items = '100', $where = null, $include = null, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling listFavorites');
        }
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling FavoritesApi.listFavorites, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling FavoritesApi.listFavorites, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/people/{personId}/favorites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\FavoritePaging',
                '/people/{personId}/favorites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\FavoritePaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\FavoritePaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
