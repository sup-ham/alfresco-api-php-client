<?php
/**
 * PeopleApi
 * PHP version 5
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alfresco Content Services REST API
 *
 * **API**  Provides access to the features of Alfresco Content Services.
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Alfresco\Api;

use \Alfresco\ApiClient;
use \Alfresco\ApiException;
use \Alfresco\Configuration;
use \Alfresco\ObjectSerializer;

/**
 * PeopleApi Class Doc Comment
 *
 * @category Class
 * @package  Alfresco
 * @author   Rhuan Barreto
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PeopleApi
{
    /**
     * API Client
     *
     * @var \Alfresco\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Alfresco\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Alfresco\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Alfresco\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Alfresco\ApiClient $apiClient set the API client
     *
     * @return PeopleApi
     */
    public function setApiClient(\Alfresco\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createPerson
     *
     * Create person
     *
     * @param \Alfresco\Model\PersonBodyCreate $person_body_create The person details. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\PersonEntry
     */
    public function createPerson($person_body_create, $fields = null)
    {
        list($response) = $this->createPersonWithHttpInfo($person_body_create, $fields);
        return $response;
    }

    /**
     * Operation createPersonWithHttpInfo
     *
     * Create person
     *
     * @param \Alfresco\Model\PersonBodyCreate $person_body_create The person details. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\PersonEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPersonWithHttpInfo($person_body_create, $fields = null)
    {
        // verify the required parameter 'person_body_create' is set
        if ($person_body_create === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_body_create when calling createPerson');
        }
        // parse inputs
        $resourcePath = "/people";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // body params
        $_tempBody = null;
        if (isset($person_body_create)) {
            $_tempBody = $person_body_create;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\PersonEntry',
                '/people'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\PersonEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\PersonEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAvatarImage
     *
     * Delete avatar image
     *
     * @param string $person_id The identifier of a person. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function deleteAvatarImage($person_id)
    {
        list($response) = $this->deleteAvatarImageWithHttpInfo($person_id);
        return $response;
    }

    /**
     * Operation deleteAvatarImageWithHttpInfo
     *
     * Delete avatar image
     *
     * @param string $person_id The identifier of a person. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAvatarImageWithHttpInfo($person_id)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling deleteAvatarImage');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/avatar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/avatar'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAvatarImage
     *
     * Get avatar image
     *
     * @param string $person_id The identifier of a person. (required)
     * @param bool $attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. (optional, default to true)
     * @param \DateTime $if_modified_since Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. (optional)
     * @param bool $placeholder If **true** and there is no avatar for this **personId**  then the placeholder image is returned, rather than a 404 response. (optional, default to true)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function getAvatarImage($person_id, $attachment = 'true', $if_modified_since = null, $placeholder = 'true')
    {
        list($response) = $this->getAvatarImageWithHttpInfo($person_id, $attachment, $if_modified_since, $placeholder);
        return $response;
    }

    /**
     * Operation getAvatarImageWithHttpInfo
     *
     * Get avatar image
     *
     * @param string $person_id The identifier of a person. (required)
     * @param bool $attachment **true** enables a web browser to download the file as an attachment. **false** means a web browser may preview the file in a new tab or window, but not download the file.  You can only set this parameter to **false** if the content type of the file is in the supported list; for example, certain image files and PDF files.  If the content type is not supported for preview, then a value of **false**  is ignored, and the attachment will be returned in the response. (optional, default to true)
     * @param \DateTime $if_modified_since Only returns the content if it has been modified since the date provided. Use the date format defined by HTTP. For example, &#x60;Wed, 09 Mar 2016 16:56:34 GMT&#x60;. (optional)
     * @param bool $placeholder If **true** and there is no avatar for this **personId**  then the placeholder image is returned, rather than a 404 response. (optional, default to true)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAvatarImageWithHttpInfo($person_id, $attachment = 'true', $if_modified_since = null, $placeholder = 'true')
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getAvatarImage');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/avatar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($attachment !== null) {
            $queryParams['attachment'] = $this->apiClient->getSerializer()->toQueryValue($attachment);
        }
        // query params
        if ($placeholder !== null) {
            $queryParams['placeholder'] = $this->apiClient->getSerializer()->toQueryValue($placeholder);
        }
        // header params
        if ($if_modified_since !== null) {
            $headerParams['If-Modified-Since'] = $this->apiClient->getSerializer()->toHeaderValue($if_modified_since);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/avatar'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPerson
     *
     * Get a person
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\PersonEntry
     */
    public function getPerson($person_id, $fields = null)
    {
        list($response) = $this->getPersonWithHttpInfo($person_id, $fields);
        return $response;
    }

    /**
     * Operation getPersonWithHttpInfo
     *
     * Get a person
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\PersonEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPersonWithHttpInfo($person_id, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling getPerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\PersonEntry',
                '/people/{personId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\PersonEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\PersonEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation listPeople
     *
     * List people
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param string[] $include Returns additional information about the person. The following optional fields can be requested: * properties * aspectNames (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\PersonPaging
     */
    public function listPeople($skip_count = '0', $max_items = '100', $order_by = null, $include = null, $fields = null)
    {
        list($response) = $this->listPeopleWithHttpInfo($skip_count, $max_items, $order_by, $include, $fields);
        return $response;
    }

    /**
     * Operation listPeopleWithHttpInfo
     *
     * List people
     *
     * @param int $skip_count The number of entities that exist in the collection before those included in this list.  If not supplied then the default value is 0. (optional, default to 0)
     * @param int $max_items The maximum number of items to return in the list.  If not supplied then the default value is 100. (optional, default to 100)
     * @param string[] $order_by A string to control the order of the entities returned in a list. You can use the **orderBy** parameter to sort the list by one or more fields.  Each field has a default sort order, which is normally ascending order. Read the API method implementation notes above to check if any fields used in this method have a descending default search order.  To sort the entities in a specific order, you can use the **ASC** and **DESC** keywords for any field. (optional)
     * @param string[] $include Returns additional information about the person. The following optional fields can be requested: * properties * aspectNames (optional)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\PersonPaging, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPeopleWithHttpInfo($skip_count = '0', $max_items = '100', $order_by = null, $include = null, $fields = null)
    {
        if (!is_null($skip_count) && ($skip_count < 0)) {
            throw new \InvalidArgumentException('invalid value for "$skip_count" when calling PeopleApi.listPeople, must be bigger than or equal to 0.');
        }

        if (!is_null($max_items) && ($max_items < 1)) {
            throw new \InvalidArgumentException('invalid value for "$max_items" when calling PeopleApi.listPeople, must be bigger than or equal to 1.');
        }

        // parse inputs
        $resourcePath = "/people";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($skip_count !== null) {
            $queryParams['skipCount'] = $this->apiClient->getSerializer()->toQueryValue($skip_count);
        }
        // query params
        if ($max_items !== null) {
            $queryParams['maxItems'] = $this->apiClient->getSerializer()->toQueryValue($max_items);
        }
        // query params
        if (is_array($order_by)) {
            $order_by = $this->apiClient->getSerializer()->serializeCollection($order_by, 'csv', true);
        }
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if (is_array($include)) {
            $include = $this->apiClient->getSerializer()->serializeCollection($include, 'csv', true);
        }
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\PersonPaging',
                '/people'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\PersonPaging', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\PersonPaging', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation requestPasswordReset
     *
     * Request password reset
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\ClientBody $client_body The client name to send email with app-specific url. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function requestPasswordReset($person_id, $client_body)
    {
        list($response) = $this->requestPasswordResetWithHttpInfo($person_id, $client_body);
        return $response;
    }

    /**
     * Operation requestPasswordResetWithHttpInfo
     *
     * Request password reset
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\ClientBody $client_body The client name to send email with app-specific url. (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestPasswordResetWithHttpInfo($person_id, $client_body)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling requestPasswordReset');
        }
        // verify the required parameter 'client_body' is set
        if ($client_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $client_body when calling requestPasswordReset');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/request-password-reset";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($client_body)) {
            $_tempBody = $client_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/request-password-reset'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation resetPassword
     *
     * Reset password
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\PasswordResetBody $password_reset_body The reset password details (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function resetPassword($person_id, $password_reset_body)
    {
        list($response) = $this->resetPasswordWithHttpInfo($person_id, $password_reset_body);
        return $response;
    }

    /**
     * Operation resetPasswordWithHttpInfo
     *
     * Reset password
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\PasswordResetBody $password_reset_body The reset password details (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resetPasswordWithHttpInfo($person_id, $password_reset_body)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling resetPassword');
        }
        // verify the required parameter 'password_reset_body' is set
        if ($password_reset_body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password_reset_body when calling resetPassword');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/reset-password";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($password_reset_body)) {
            $_tempBody = $password_reset_body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/reset-password'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation updateAvatarImage
     *
     * Update avatar image
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $content_body_update The binary content (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return void
     */
    public function updateAvatarImage($person_id, $content_body_update)
    {
        list($response) = $this->updateAvatarImageWithHttpInfo($person_id, $content_body_update);
        return $response;
    }

    /**
     * Operation updateAvatarImageWithHttpInfo
     *
     * Update avatar image
     *
     * @param string $person_id The identifier of a person. (required)
     * @param string $content_body_update The binary content (required)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAvatarImageWithHttpInfo($person_id, $content_body_update)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling updateAvatarImage');
        }
        // verify the required parameter 'content_body_update' is set
        if ($content_body_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $content_body_update when calling updateAvatarImage');
        }
        // parse inputs
        $resourcePath = "/people/{personId}/avatar";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/octet-stream']);

        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($content_body_update)) {
            $_tempBody = $content_body_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/people/{personId}/avatar'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePerson
     *
     * Update person
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\PersonBodyUpdate $person_body_update The person details. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return \Alfresco\Model\PersonEntry
     */
    public function updatePerson($person_id, $person_body_update, $fields = null)
    {
        list($response) = $this->updatePersonWithHttpInfo($person_id, $person_body_update, $fields);
        return $response;
    }

    /**
     * Operation updatePersonWithHttpInfo
     *
     * Update person
     *
     * @param string $person_id The identifier of a person. (required)
     * @param \Alfresco\Model\PersonBodyUpdate $person_body_update The person details. (required)
     * @param string[] $fields A list of field names.  You can use this parameter to restrict the fields returned within a response if, for example, you want to save on overall bandwidth.  The list applies to a returned individual entity or entries within a collection.  If the API method also supports the **include** parameter, then the fields specified in the **include** parameter are returned in addition to those specified in the **fields** parameter. (optional)
     * @throws \Alfresco\ApiException on non-2xx response
     * @return array of \Alfresco\Model\PersonEntry, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePersonWithHttpInfo($person_id, $person_body_update, $fields = null)
    {
        // verify the required parameter 'person_id' is set
        if ($person_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_id when calling updatePerson');
        }
        // verify the required parameter 'person_body_update' is set
        if ($person_body_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $person_body_update when calling updatePerson');
        }
        // parse inputs
        $resourcePath = "/people/{personId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if (is_array($fields)) {
            $fields = $this->apiClient->getSerializer()->serializeCollection($fields, 'csv', true);
        }
        if ($fields !== null) {
            $queryParams['fields'] = $this->apiClient->getSerializer()->toQueryValue($fields);
        }
        // path params
        if ($person_id !== null) {
            $resourcePath = str_replace(
                "{" . "personId" . "}",
                $this->apiClient->getSerializer()->toPathValue($person_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($person_body_update)) {
            $_tempBody = $person_body_update;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Alfresco\Model\PersonEntry',
                '/people/{personId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Alfresco\Model\PersonEntry', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\PersonEntry', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Alfresco\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
